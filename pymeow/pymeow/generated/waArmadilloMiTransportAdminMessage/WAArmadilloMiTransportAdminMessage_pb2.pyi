"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import sys

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
from builtins import (
    bool,
    int,
    str,
    type,
)
from collections.abc import (
    Iterable,
)
from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    RepeatedScalarFieldContainer,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    Literal,
    NewType,
    final,
)

DESCRIPTOR: FileDescriptor

@final
class MiTransportAdminMessage(Message):
    DESCRIPTOR: Descriptor

    @final
    class GroupImageChanged(Message):
        DESCRIPTOR: Descriptor

        class _Action:
            ValueType = NewType("ValueType", int)
            V: typing_extensions.TypeAlias = ValueType

        class _ActionEnumTypeWrapper(_EnumTypeWrapper[MiTransportAdminMessage.GroupImageChanged._Action.ValueType], type):
            DESCRIPTOR: EnumDescriptor
            CHANGED: MiTransportAdminMessage.GroupImageChanged._Action.ValueType  # 1
            REMOVED: MiTransportAdminMessage.GroupImageChanged._Action.ValueType  # 2

        class Action(_Action, metaclass=_ActionEnumTypeWrapper): ...
        CHANGED: MiTransportAdminMessage.GroupImageChanged.Action.ValueType  # 1
        REMOVED: MiTransportAdminMessage.GroupImageChanged.Action.ValueType  # 2

        ACTION_FIELD_NUMBER: int
        action: MiTransportAdminMessage.GroupImageChanged.Action.ValueType
        def __init__(
            self,
            *,
            action: MiTransportAdminMessage.GroupImageChanged.Action.ValueType | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["action", b"action"]) -> bool: ...
        def ClearField(self, field_name: Literal["action", b"action"]) -> None: ...

    @final
    class MessagePinned(Message):
        DESCRIPTOR: Descriptor

        class _Action:
            ValueType = NewType("ValueType", int)
            V: typing_extensions.TypeAlias = ValueType

        class _ActionEnumTypeWrapper(_EnumTypeWrapper[MiTransportAdminMessage.MessagePinned._Action.ValueType], type):
            DESCRIPTOR: EnumDescriptor
            PINNED: MiTransportAdminMessage.MessagePinned._Action.ValueType  # 1
            UNPINNED: MiTransportAdminMessage.MessagePinned._Action.ValueType  # 2

        class Action(_Action, metaclass=_ActionEnumTypeWrapper): ...
        PINNED: MiTransportAdminMessage.MessagePinned.Action.ValueType  # 1
        UNPINNED: MiTransportAdminMessage.MessagePinned.Action.ValueType  # 2

        ACTION_FIELD_NUMBER: int
        action: MiTransportAdminMessage.MessagePinned.Action.ValueType
        def __init__(
            self,
            *,
            action: MiTransportAdminMessage.MessagePinned.Action.ValueType | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["action", b"action"]) -> bool: ...
        def ClearField(self, field_name: Literal["action", b"action"]) -> None: ...

    @final
    class GroupMembershipAddModeChanged(Message):
        DESCRIPTOR: Descriptor

        class _Mode:
            ValueType = NewType("ValueType", int)
            V: typing_extensions.TypeAlias = ValueType

        class _ModeEnumTypeWrapper(_EnumTypeWrapper[MiTransportAdminMessage.GroupMembershipAddModeChanged._Mode.ValueType], type):
            DESCRIPTOR: EnumDescriptor
            ALL_MEMBERS: MiTransportAdminMessage.GroupMembershipAddModeChanged._Mode.ValueType  # 1
            ADMINS_ONLY: MiTransportAdminMessage.GroupMembershipAddModeChanged._Mode.ValueType  # 2

        class Mode(_Mode, metaclass=_ModeEnumTypeWrapper): ...
        ALL_MEMBERS: MiTransportAdminMessage.GroupMembershipAddModeChanged.Mode.ValueType  # 1
        ADMINS_ONLY: MiTransportAdminMessage.GroupMembershipAddModeChanged.Mode.ValueType  # 2

        MODE_FIELD_NUMBER: int
        mode: MiTransportAdminMessage.GroupMembershipAddModeChanged.Mode.ValueType
        def __init__(
            self,
            *,
            mode: MiTransportAdminMessage.GroupMembershipAddModeChanged.Mode.ValueType | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["mode", b"mode"]) -> bool: ...
        def ClearField(self, field_name: Literal["mode", b"mode"]) -> None: ...

    @final
    class GroupAdminChanged(Message):
        DESCRIPTOR: Descriptor

        class _Action:
            ValueType = NewType("ValueType", int)
            V: typing_extensions.TypeAlias = ValueType

        class _ActionEnumTypeWrapper(_EnumTypeWrapper[MiTransportAdminMessage.GroupAdminChanged._Action.ValueType], type):
            DESCRIPTOR: EnumDescriptor
            ADDED: MiTransportAdminMessage.GroupAdminChanged._Action.ValueType  # 1
            REMOVED: MiTransportAdminMessage.GroupAdminChanged._Action.ValueType  # 2

        class Action(_Action, metaclass=_ActionEnumTypeWrapper): ...
        ADDED: MiTransportAdminMessage.GroupAdminChanged.Action.ValueType  # 1
        REMOVED: MiTransportAdminMessage.GroupAdminChanged.Action.ValueType  # 2

        TARGETUSERID_FIELD_NUMBER: int
        ACTION_FIELD_NUMBER: int
        action: MiTransportAdminMessage.GroupAdminChanged.Action.ValueType
        @property
        def targetUserID(self) -> RepeatedScalarFieldContainer[str]: ...
        def __init__(
            self,
            *,
            targetUserID: Iterable[str] | None = ...,
            action: MiTransportAdminMessage.GroupAdminChanged.Action.ValueType | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["action", b"action"]) -> bool: ...
        def ClearField(self, field_name: Literal["action", b"action", "targetUserID", b"targetUserID"]) -> None: ...

    @final
    class GroupParticipantChanged(Message):
        DESCRIPTOR: Descriptor

        class _Action:
            ValueType = NewType("ValueType", int)
            V: typing_extensions.TypeAlias = ValueType

        class _ActionEnumTypeWrapper(_EnumTypeWrapper[MiTransportAdminMessage.GroupParticipantChanged._Action.ValueType], type):
            DESCRIPTOR: EnumDescriptor
            ADDED: MiTransportAdminMessage.GroupParticipantChanged._Action.ValueType  # 1
            REMOVED: MiTransportAdminMessage.GroupParticipantChanged._Action.ValueType  # 2

        class Action(_Action, metaclass=_ActionEnumTypeWrapper): ...
        ADDED: MiTransportAdminMessage.GroupParticipantChanged.Action.ValueType  # 1
        REMOVED: MiTransportAdminMessage.GroupParticipantChanged.Action.ValueType  # 2

        TARGETUSERID_FIELD_NUMBER: int
        ACTION_FIELD_NUMBER: int
        action: MiTransportAdminMessage.GroupParticipantChanged.Action.ValueType
        @property
        def targetUserID(self) -> RepeatedScalarFieldContainer[str]: ...
        def __init__(
            self,
            *,
            targetUserID: Iterable[str] | None = ...,
            action: MiTransportAdminMessage.GroupParticipantChanged.Action.ValueType | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["action", b"action"]) -> bool: ...
        def ClearField(self, field_name: Literal["action", b"action", "targetUserID", b"targetUserID"]) -> None: ...

    @final
    class DisappearingSettingChanged(Message):
        DESCRIPTOR: Descriptor

        DISAPPEARINGSETTINGDURATIONSECONDS_FIELD_NUMBER: int
        OLDDISAPPEARINGSETTINGDURATIONSECONDS_FIELD_NUMBER: int
        disappearingSettingDurationSeconds: int
        oldDisappearingSettingDurationSeconds: int
        def __init__(
            self,
            *,
            disappearingSettingDurationSeconds: int | None = ...,
            oldDisappearingSettingDurationSeconds: int | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["disappearingSettingDurationSeconds", b"disappearingSettingDurationSeconds", "oldDisappearingSettingDurationSeconds", b"oldDisappearingSettingDurationSeconds"]) -> bool: ...
        def ClearField(self, field_name: Literal["disappearingSettingDurationSeconds", b"disappearingSettingDurationSeconds", "oldDisappearingSettingDurationSeconds", b"oldDisappearingSettingDurationSeconds"]) -> None: ...

    @final
    class IconChanged(Message):
        DESCRIPTOR: Descriptor

        THREADICON_FIELD_NUMBER: int
        threadIcon: str
        def __init__(
            self,
            *,
            threadIcon: str | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["threadIcon", b"threadIcon"]) -> bool: ...
        def ClearField(self, field_name: Literal["threadIcon", b"threadIcon"]) -> None: ...

    @final
    class LinkCta(Message):
        DESCRIPTOR: Descriptor

        @final
        class UkOsaAdminText(Message):
            DESCRIPTOR: Descriptor

            INITIATORUSERID_FIELD_NUMBER: int
            initiatorUserID: str
            def __init__(
                self,
                *,
                initiatorUserID: str | None = ...,
            ) -> None: ...
            def HasField(self, field_name: Literal["initiatorUserID", b"initiatorUserID"]) -> bool: ...
            def ClearField(self, field_name: Literal["initiatorUserID", b"initiatorUserID"]) -> None: ...

        UKOSAADMINTEXT_FIELD_NUMBER: int
        @property
        def ukOsaAdminText(self) -> MiTransportAdminMessage.LinkCta.UkOsaAdminText: ...
        def __init__(
            self,
            *,
            ukOsaAdminText: MiTransportAdminMessage.LinkCta.UkOsaAdminText | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["content", b"content", "ukOsaAdminText", b"ukOsaAdminText"]) -> bool: ...
        def ClearField(self, field_name: Literal["content", b"content", "ukOsaAdminText", b"ukOsaAdminText"]) -> None: ...
        def WhichOneof(self, oneof_group: Literal["content", b"content"]) -> Literal["ukOsaAdminText"] | None: ...

    @final
    class QuickReactionChanged(Message):
        DESCRIPTOR: Descriptor

        EMOJINAME_FIELD_NUMBER: int
        emojiName: str
        def __init__(
            self,
            *,
            emojiName: str | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["emojiName", b"emojiName"]) -> bool: ...
        def ClearField(self, field_name: Literal["emojiName", b"emojiName"]) -> None: ...

    @final
    class GroupNameChanged(Message):
        DESCRIPTOR: Descriptor

        GROUPNAME_FIELD_NUMBER: int
        groupName: str
        def __init__(
            self,
            *,
            groupName: str | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["groupName", b"groupName"]) -> bool: ...
        def ClearField(self, field_name: Literal["groupName", b"groupName"]) -> None: ...

    @final
    class NicknameChanged(Message):
        DESCRIPTOR: Descriptor

        TARGETUSERID_FIELD_NUMBER: int
        NICKNAME_FIELD_NUMBER: int
        targetUserID: str
        nickname: str
        def __init__(
            self,
            *,
            targetUserID: str | None = ...,
            nickname: str | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["nickname", b"nickname", "targetUserID", b"targetUserID"]) -> bool: ...
        def ClearField(self, field_name: Literal["nickname", b"nickname", "targetUserID", b"targetUserID"]) -> None: ...

    @final
    class ChatThemeChanged(Message):
        DESCRIPTOR: Descriptor

        THEMENAME_FIELD_NUMBER: int
        THEMEEMOJI_FIELD_NUMBER: int
        THEMETYPE_FIELD_NUMBER: int
        themeName: str
        themeEmoji: str
        themeType: int
        def __init__(
            self,
            *,
            themeName: str | None = ...,
            themeEmoji: str | None = ...,
            themeType: int | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["themeEmoji", b"themeEmoji", "themeName", b"themeName", "themeType", b"themeType"]) -> bool: ...
        def ClearField(self, field_name: Literal["themeEmoji", b"themeEmoji", "themeName", b"themeName", "themeType", b"themeType"]) -> None: ...

    CHATTHEMECHANGED_FIELD_NUMBER: int
    NICKNAMECHANGED_FIELD_NUMBER: int
    GROUPPARTICIPANTCHANGED_FIELD_NUMBER: int
    GROUPADMINCHANGED_FIELD_NUMBER: int
    GROUPNAMECHANGED_FIELD_NUMBER: int
    GROUPMEMBERSHIPADDMODECHANGED_FIELD_NUMBER: int
    MESSAGEPINNED_FIELD_NUMBER: int
    GROUPIMAGECHANGED_FIELD_NUMBER: int
    QUICKREACTIONCHANGED_FIELD_NUMBER: int
    LINKCTA_FIELD_NUMBER: int
    ICONCHANGED_FIELD_NUMBER: int
    DISAPPEARINGSETTINGCHANGED_FIELD_NUMBER: int
    @property
    def chatThemeChanged(self) -> MiTransportAdminMessage.ChatThemeChanged: ...
    @property
    def nicknameChanged(self) -> MiTransportAdminMessage.NicknameChanged: ...
    @property
    def groupParticipantChanged(self) -> MiTransportAdminMessage.GroupParticipantChanged: ...
    @property
    def groupAdminChanged(self) -> MiTransportAdminMessage.GroupAdminChanged: ...
    @property
    def groupNameChanged(self) -> MiTransportAdminMessage.GroupNameChanged: ...
    @property
    def groupMembershipAddModeChanged(self) -> MiTransportAdminMessage.GroupMembershipAddModeChanged: ...
    @property
    def messagePinned(self) -> MiTransportAdminMessage.MessagePinned: ...
    @property
    def groupImageChanged(self) -> MiTransportAdminMessage.GroupImageChanged: ...
    @property
    def quickReactionChanged(self) -> MiTransportAdminMessage.QuickReactionChanged: ...
    @property
    def linkCta(self) -> MiTransportAdminMessage.LinkCta: ...
    @property
    def iconChanged(self) -> MiTransportAdminMessage.IconChanged: ...
    @property
    def disappearingSettingChanged(self) -> MiTransportAdminMessage.DisappearingSettingChanged: ...
    def __init__(
        self,
        *,
        chatThemeChanged: MiTransportAdminMessage.ChatThemeChanged | None = ...,
        nicknameChanged: MiTransportAdminMessage.NicknameChanged | None = ...,
        groupParticipantChanged: MiTransportAdminMessage.GroupParticipantChanged | None = ...,
        groupAdminChanged: MiTransportAdminMessage.GroupAdminChanged | None = ...,
        groupNameChanged: MiTransportAdminMessage.GroupNameChanged | None = ...,
        groupMembershipAddModeChanged: MiTransportAdminMessage.GroupMembershipAddModeChanged | None = ...,
        messagePinned: MiTransportAdminMessage.MessagePinned | None = ...,
        groupImageChanged: MiTransportAdminMessage.GroupImageChanged | None = ...,
        quickReactionChanged: MiTransportAdminMessage.QuickReactionChanged | None = ...,
        linkCta: MiTransportAdminMessage.LinkCta | None = ...,
        iconChanged: MiTransportAdminMessage.IconChanged | None = ...,
        disappearingSettingChanged: MiTransportAdminMessage.DisappearingSettingChanged | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["chatThemeChanged", b"chatThemeChanged", "content", b"content", "disappearingSettingChanged", b"disappearingSettingChanged", "groupAdminChanged", b"groupAdminChanged", "groupImageChanged", b"groupImageChanged", "groupMembershipAddModeChanged", b"groupMembershipAddModeChanged", "groupNameChanged", b"groupNameChanged", "groupParticipantChanged", b"groupParticipantChanged", "iconChanged", b"iconChanged", "linkCta", b"linkCta", "messagePinned", b"messagePinned", "nicknameChanged", b"nicknameChanged", "quickReactionChanged", b"quickReactionChanged"]) -> bool: ...
    def ClearField(self, field_name: Literal["chatThemeChanged", b"chatThemeChanged", "content", b"content", "disappearingSettingChanged", b"disappearingSettingChanged", "groupAdminChanged", b"groupAdminChanged", "groupImageChanged", b"groupImageChanged", "groupMembershipAddModeChanged", b"groupMembershipAddModeChanged", "groupNameChanged", b"groupNameChanged", "groupParticipantChanged", b"groupParticipantChanged", "iconChanged", b"iconChanged", "linkCta", b"linkCta", "messagePinned", b"messagePinned", "nicknameChanged", b"nicknameChanged", "quickReactionChanged", b"quickReactionChanged"]) -> None: ...
    def WhichOneof(self, oneof_group: Literal["content", b"content"]) -> Literal["chatThemeChanged", "nicknameChanged", "groupParticipantChanged", "groupAdminChanged", "groupNameChanged", "groupMembershipAddModeChanged", "messagePinned", "groupImageChanged", "quickReactionChanged", "linkCta", "iconChanged", "disappearingSettingChanged"] | None: ...
