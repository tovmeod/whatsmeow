"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import sys

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
from builtins import (
    bool,
    int,
    str,
    type,
)
from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    Literal,
    NewType,
    final,
)

DESCRIPTOR: FileDescriptor

@final
class TransportEvent(Message):
    DESCRIPTOR: Descriptor

    @final
    class Event(Message):
        DESCRIPTOR: Descriptor

        @final
        class IcdcAlert(Message):
            DESCRIPTOR: Descriptor

            class _Type:
                ValueType = NewType("ValueType", int)
                V: typing_extensions.TypeAlias = ValueType

            class _TypeEnumTypeWrapper(_EnumTypeWrapper[TransportEvent.Event.IcdcAlert._Type.ValueType], type):
                DESCRIPTOR: EnumDescriptor
                NONE: TransportEvent.Event.IcdcAlert._Type.ValueType  # 0
                DETECTED: TransportEvent.Event.IcdcAlert._Type.ValueType  # 1
                CLEARED: TransportEvent.Event.IcdcAlert._Type.ValueType  # 2

            class Type(_Type, metaclass=_TypeEnumTypeWrapper): ...
            NONE: TransportEvent.Event.IcdcAlert.Type.ValueType  # 0
            DETECTED: TransportEvent.Event.IcdcAlert.Type.ValueType  # 1
            CLEARED: TransportEvent.Event.IcdcAlert.Type.ValueType  # 2

            TYPE_FIELD_NUMBER: int
            type: TransportEvent.Event.IcdcAlert.Type.ValueType
            def __init__(
                self,
                *,
                type: TransportEvent.Event.IcdcAlert.Type.ValueType | None = ...,
            ) -> None: ...
            def HasField(self, field_name: Literal["type", b"type"]) -> bool: ...
            def ClearField(self, field_name: Literal["type", b"type"]) -> None: ...

        @final
        class DeviceChange(Message):
            DESCRIPTOR: Descriptor

            class _Type:
                ValueType = NewType("ValueType", int)
                V: typing_extensions.TypeAlias = ValueType

            class _TypeEnumTypeWrapper(_EnumTypeWrapper[TransportEvent.Event.DeviceChange._Type.ValueType], type):
                DESCRIPTOR: EnumDescriptor
                NONE: TransportEvent.Event.DeviceChange._Type.ValueType  # 0
                ADDED: TransportEvent.Event.DeviceChange._Type.ValueType  # 1
                REMOVED: TransportEvent.Event.DeviceChange._Type.ValueType  # 2
                REPLACED: TransportEvent.Event.DeviceChange._Type.ValueType  # 3

            class Type(_Type, metaclass=_TypeEnumTypeWrapper): ...
            NONE: TransportEvent.Event.DeviceChange.Type.ValueType  # 0
            ADDED: TransportEvent.Event.DeviceChange.Type.ValueType  # 1
            REMOVED: TransportEvent.Event.DeviceChange.Type.ValueType  # 2
            REPLACED: TransportEvent.Event.DeviceChange.Type.ValueType  # 3

            TYPE_FIELD_NUMBER: int
            DEVICENAME_FIELD_NUMBER: int
            DEVICEPLATFORM_FIELD_NUMBER: int
            DEVICEMODEL_FIELD_NUMBER: int
            type: TransportEvent.Event.DeviceChange.Type.ValueType
            deviceName: str
            devicePlatform: str
            deviceModel: str
            def __init__(
                self,
                *,
                type: TransportEvent.Event.DeviceChange.Type.ValueType | None = ...,
                deviceName: str | None = ...,
                devicePlatform: str | None = ...,
                deviceModel: str | None = ...,
            ) -> None: ...
            def HasField(self, field_name: Literal["deviceModel", b"deviceModel", "deviceName", b"deviceName", "devicePlatform", b"devicePlatform", "type", b"type"]) -> bool: ...
            def ClearField(self, field_name: Literal["deviceModel", b"deviceModel", "deviceName", b"deviceName", "devicePlatform", b"devicePlatform", "type", b"type"]) -> None: ...

        DEVICECHANGE_FIELD_NUMBER: int
        ICDCALERT_FIELD_NUMBER: int
        @property
        def deviceChange(self) -> TransportEvent.Event.DeviceChange: ...
        @property
        def icdcAlert(self) -> TransportEvent.Event.IcdcAlert: ...
        def __init__(
            self,
            *,
            deviceChange: TransportEvent.Event.DeviceChange | None = ...,
            icdcAlert: TransportEvent.Event.IcdcAlert | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["deviceChange", b"deviceChange", "event", b"event", "icdcAlert", b"icdcAlert"]) -> bool: ...
        def ClearField(self, field_name: Literal["deviceChange", b"deviceChange", "event", b"event", "icdcAlert", b"icdcAlert"]) -> None: ...
        def WhichOneof(self, oneof_group: Literal["event", b"event"]) -> Literal["deviceChange", "icdcAlert"] | None: ...

    @final
    class Placeholder(Message):
        DESCRIPTOR: Descriptor

        class _Type:
            ValueType = NewType("ValueType", int)
            V: typing_extensions.TypeAlias = ValueType

        class _TypeEnumTypeWrapper(_EnumTypeWrapper[TransportEvent.Placeholder._Type.ValueType], type):
            DESCRIPTOR: EnumDescriptor
            DECRYPTION_FAILURE: TransportEvent.Placeholder._Type.ValueType  # 1
            UNAVAILABLE_MESSAGE: TransportEvent.Placeholder._Type.ValueType  # 2

        class Type(_Type, metaclass=_TypeEnumTypeWrapper): ...
        DECRYPTION_FAILURE: TransportEvent.Placeholder.Type.ValueType  # 1
        UNAVAILABLE_MESSAGE: TransportEvent.Placeholder.Type.ValueType  # 2

        TYPE_FIELD_NUMBER: int
        type: TransportEvent.Placeholder.Type.ValueType
        def __init__(
            self,
            *,
            type: TransportEvent.Placeholder.Type.ValueType | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["type", b"type"]) -> bool: ...
        def ClearField(self, field_name: Literal["type", b"type"]) -> None: ...

    PLACEHOLDER_FIELD_NUMBER: int
    EVENT_FIELD_NUMBER: int
    @property
    def placeholder(self) -> TransportEvent.Placeholder: ...
    @property
    def event(self) -> TransportEvent.Event: ...
    def __init__(
        self,
        *,
        placeholder: TransportEvent.Placeholder | None = ...,
        event: TransportEvent.Event | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["content", b"content", "event", b"event", "placeholder", b"placeholder"]) -> bool: ...
    def ClearField(self, field_name: Literal["content", b"content", "event", b"event", "placeholder", b"placeholder"]) -> None: ...
    def WhichOneof(self, oneof_group: Literal["content", b"content"]) -> Literal["placeholder", "event"] | None: ...
