"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import sys

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
from builtins import (
    bool,
    bytes,
    int,
    type,
)
from collections.abc import (
    Iterable,
)
from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    RepeatedScalarFieldContainer,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    Literal,
    NewType,
    final,
)

DESCRIPTOR: FileDescriptor

class _ADVEncryptionType:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _ADVEncryptionTypeEnumTypeWrapper(_EnumTypeWrapper[_ADVEncryptionType.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    E2EE: _ADVEncryptionType.ValueType  # 0
    HOSTED: _ADVEncryptionType.ValueType  # 1

class ADVEncryptionType(_ADVEncryptionType, metaclass=_ADVEncryptionTypeEnumTypeWrapper): ...

E2EE: ADVEncryptionType.ValueType  # 0
HOSTED: ADVEncryptionType.ValueType  # 1

@final
class ADVKeyIndexList(Message):
    DESCRIPTOR: Descriptor

    RAWID_FIELD_NUMBER: int
    TIMESTAMP_FIELD_NUMBER: int
    CURRENTINDEX_FIELD_NUMBER: int
    VALIDINDEXES_FIELD_NUMBER: int
    ACCOUNTTYPE_FIELD_NUMBER: int
    rawID: int
    timestamp: int
    currentIndex: int
    accountType: ADVEncryptionType.ValueType
    @property
    def validIndexes(self) -> RepeatedScalarFieldContainer[int]: ...
    def __init__(
        self,
        *,
        rawID: int | None = ...,
        timestamp: int | None = ...,
        currentIndex: int | None = ...,
        validIndexes: Iterable[int] | None = ...,
        accountType: ADVEncryptionType.ValueType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["accountType", b"accountType", "currentIndex", b"currentIndex", "rawID", b"rawID", "timestamp", b"timestamp"]) -> bool: ...
    def ClearField(self, field_name: Literal["accountType", b"accountType", "currentIndex", b"currentIndex", "rawID", b"rawID", "timestamp", b"timestamp", "validIndexes", b"validIndexes"]) -> None: ...

@final
class ADVSignedKeyIndexList(Message):
    DESCRIPTOR: Descriptor

    DETAILS_FIELD_NUMBER: int
    ACCOUNTSIGNATURE_FIELD_NUMBER: int
    ACCOUNTSIGNATUREKEY_FIELD_NUMBER: int
    details: bytes
    accountSignature: bytes
    accountSignatureKey: bytes
    def __init__(
        self,
        *,
        details: bytes | None = ...,
        accountSignature: bytes | None = ...,
        accountSignatureKey: bytes | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["accountSignature", b"accountSignature", "accountSignatureKey", b"accountSignatureKey", "details", b"details"]) -> bool: ...
    def ClearField(self, field_name: Literal["accountSignature", b"accountSignature", "accountSignatureKey", b"accountSignatureKey", "details", b"details"]) -> None: ...

@final
class ADVDeviceIdentity(Message):
    DESCRIPTOR: Descriptor

    RAWID_FIELD_NUMBER: int
    TIMESTAMP_FIELD_NUMBER: int
    KEYINDEX_FIELD_NUMBER: int
    ACCOUNTTYPE_FIELD_NUMBER: int
    DEVICETYPE_FIELD_NUMBER: int
    rawID: int
    timestamp: int
    keyIndex: int
    accountType: ADVEncryptionType.ValueType
    deviceType: ADVEncryptionType.ValueType
    def __init__(
        self,
        *,
        rawID: int | None = ...,
        timestamp: int | None = ...,
        keyIndex: int | None = ...,
        accountType: ADVEncryptionType.ValueType | None = ...,
        deviceType: ADVEncryptionType.ValueType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["accountType", b"accountType", "deviceType", b"deviceType", "keyIndex", b"keyIndex", "rawID", b"rawID", "timestamp", b"timestamp"]) -> bool: ...
    def ClearField(self, field_name: Literal["accountType", b"accountType", "deviceType", b"deviceType", "keyIndex", b"keyIndex", "rawID", b"rawID", "timestamp", b"timestamp"]) -> None: ...

@final
class ADVSignedDeviceIdentity(Message):
    DESCRIPTOR: Descriptor

    DETAILS_FIELD_NUMBER: int
    ACCOUNTSIGNATUREKEY_FIELD_NUMBER: int
    ACCOUNTSIGNATURE_FIELD_NUMBER: int
    DEVICESIGNATURE_FIELD_NUMBER: int
    details: bytes
    accountSignatureKey: bytes
    accountSignature: bytes
    deviceSignature: bytes
    def __init__(
        self,
        *,
        details: bytes | None = ...,
        accountSignatureKey: bytes | None = ...,
        accountSignature: bytes | None = ...,
        deviceSignature: bytes | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["accountSignature", b"accountSignature", "accountSignatureKey", b"accountSignatureKey", "details", b"details", "deviceSignature", b"deviceSignature"]) -> bool: ...
    def ClearField(self, field_name: Literal["accountSignature", b"accountSignature", "accountSignatureKey", b"accountSignatureKey", "details", b"details", "deviceSignature", b"deviceSignature"]) -> None: ...

@final
class ADVSignedDeviceIdentityHMAC(Message):
    DESCRIPTOR: Descriptor

    DETAILS_FIELD_NUMBER: int
    HMAC_FIELD_NUMBER: int
    ACCOUNTTYPE_FIELD_NUMBER: int
    details: bytes
    HMAC: bytes
    accountType: ADVEncryptionType.ValueType
    def __init__(
        self,
        *,
        details: bytes | None = ...,
        HMAC: bytes | None = ...,
        accountType: ADVEncryptionType.ValueType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["HMAC", b"HMAC", "accountType", b"accountType", "details", b"details"]) -> bool: ...
    def ClearField(self, field_name: Literal["HMAC", b"HMAC", "accountType", b"accountType", "details", b"details"]) -> None: ...
