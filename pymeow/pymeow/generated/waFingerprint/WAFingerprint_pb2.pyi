"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import sys

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
from builtins import (
    bool,
    bytes,
    int,
    type,
)
from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    Literal,
    NewType,
    final,
)

DESCRIPTOR: FileDescriptor

class _HostedState:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _HostedStateEnumTypeWrapper(_EnumTypeWrapper[_HostedState.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    E2EE: _HostedState.ValueType  # 0
    HOSTED: _HostedState.ValueType  # 1

class HostedState(_HostedState, metaclass=_HostedStateEnumTypeWrapper): ...

E2EE: HostedState.ValueType  # 0
HOSTED: HostedState.ValueType  # 1

@final
class FingerprintData(Message):
    DESCRIPTOR: Descriptor

    PUBLICKEY_FIELD_NUMBER: int
    PNIDENTIFIER_FIELD_NUMBER: int
    LIDIDENTIFIER_FIELD_NUMBER: int
    USERNAMEIDENTIFIER_FIELD_NUMBER: int
    HOSTEDSTATE_FIELD_NUMBER: int
    HASHEDPUBLICKEY_FIELD_NUMBER: int
    publicKey: bytes
    pnIdentifier: bytes
    lidIdentifier: bytes
    usernameIdentifier: bytes
    hostedState: HostedState.ValueType
    hashedPublicKey: bytes
    def __init__(
        self,
        *,
        publicKey: bytes | None = ...,
        pnIdentifier: bytes | None = ...,
        lidIdentifier: bytes | None = ...,
        usernameIdentifier: bytes | None = ...,
        hostedState: HostedState.ValueType | None = ...,
        hashedPublicKey: bytes | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["hashedPublicKey", b"hashedPublicKey", "hostedState", b"hostedState", "lidIdentifier", b"lidIdentifier", "pnIdentifier", b"pnIdentifier", "publicKey", b"publicKey", "usernameIdentifier", b"usernameIdentifier"]) -> bool: ...
    def ClearField(self, field_name: Literal["hashedPublicKey", b"hashedPublicKey", "hostedState", b"hostedState", "lidIdentifier", b"lidIdentifier", "pnIdentifier", b"pnIdentifier", "publicKey", b"publicKey", "usernameIdentifier", b"usernameIdentifier"]) -> None: ...

@final
class CombinedFingerprint(Message):
    DESCRIPTOR: Descriptor

    VERSION_FIELD_NUMBER: int
    LOCALFINGERPRINT_FIELD_NUMBER: int
    REMOTEFINGERPRINT_FIELD_NUMBER: int
    version: int
    @property
    def localFingerprint(self) -> FingerprintData: ...
    @property
    def remoteFingerprint(self) -> FingerprintData: ...
    def __init__(
        self,
        *,
        version: int | None = ...,
        localFingerprint: FingerprintData | None = ...,
        remoteFingerprint: FingerprintData | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["localFingerprint", b"localFingerprint", "remoteFingerprint", b"remoteFingerprint", "version", b"version"]) -> bool: ...
    def ClearField(self, field_name: Literal["localFingerprint", b"localFingerprint", "remoteFingerprint", b"remoteFingerprint", "version", b"version"]) -> None: ...
