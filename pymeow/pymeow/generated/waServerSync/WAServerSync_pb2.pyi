"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import sys

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
from builtins import (
    bool,
    bytes,
    int,
    str,
    type,
)
from collections.abc import (
    Iterable,
)
from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    Literal,
    NewType,
    final,
)

DESCRIPTOR: FileDescriptor

@final
class SyncdMutation(Message):
    DESCRIPTOR: Descriptor

    class _SyncdOperation:
        ValueType = NewType("ValueType", int)
        V: typing_extensions.TypeAlias = ValueType

    class _SyncdOperationEnumTypeWrapper(_EnumTypeWrapper[SyncdMutation._SyncdOperation.ValueType], type):
        DESCRIPTOR: EnumDescriptor
        SET: SyncdMutation._SyncdOperation.ValueType  # 0
        REMOVE: SyncdMutation._SyncdOperation.ValueType  # 1

    class SyncdOperation(_SyncdOperation, metaclass=_SyncdOperationEnumTypeWrapper): ...
    SET: SyncdMutation.SyncdOperation.ValueType  # 0
    REMOVE: SyncdMutation.SyncdOperation.ValueType  # 1

    OPERATION_FIELD_NUMBER: int
    RECORD_FIELD_NUMBER: int
    operation: SyncdMutation.SyncdOperation.ValueType
    @property
    def record(self) -> SyncdRecord: ...
    def __init__(
        self,
        *,
        operation: SyncdMutation.SyncdOperation.ValueType | None = ...,
        record: SyncdRecord | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["operation", b"operation", "record", b"record"]) -> bool: ...
    def ClearField(self, field_name: Literal["operation", b"operation", "record", b"record"]) -> None: ...

@final
class SyncdVersion(Message):
    DESCRIPTOR: Descriptor

    VERSION_FIELD_NUMBER: int
    version: int
    def __init__(
        self,
        *,
        version: int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["version", b"version"]) -> bool: ...
    def ClearField(self, field_name: Literal["version", b"version"]) -> None: ...

@final
class ExitCode(Message):
    DESCRIPTOR: Descriptor

    CODE_FIELD_NUMBER: int
    TEXT_FIELD_NUMBER: int
    code: int
    text: str
    def __init__(
        self,
        *,
        code: int | None = ...,
        text: str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["code", b"code", "text", b"text"]) -> bool: ...
    def ClearField(self, field_name: Literal["code", b"code", "text", b"text"]) -> None: ...

@final
class SyncdIndex(Message):
    DESCRIPTOR: Descriptor

    BLOB_FIELD_NUMBER: int
    blob: bytes
    def __init__(
        self,
        *,
        blob: bytes | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["blob", b"blob"]) -> bool: ...
    def ClearField(self, field_name: Literal["blob", b"blob"]) -> None: ...

@final
class SyncdValue(Message):
    DESCRIPTOR: Descriptor

    BLOB_FIELD_NUMBER: int
    blob: bytes
    def __init__(
        self,
        *,
        blob: bytes | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["blob", b"blob"]) -> bool: ...
    def ClearField(self, field_name: Literal["blob", b"blob"]) -> None: ...

@final
class KeyId(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    ID: bytes
    def __init__(
        self,
        *,
        ID: bytes | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["ID", b"ID"]) -> bool: ...
    def ClearField(self, field_name: Literal["ID", b"ID"]) -> None: ...

@final
class SyncdRecord(Message):
    DESCRIPTOR: Descriptor

    INDEX_FIELD_NUMBER: int
    VALUE_FIELD_NUMBER: int
    KEYID_FIELD_NUMBER: int
    @property
    def index(self) -> SyncdIndex: ...
    @property
    def value(self) -> SyncdValue: ...
    @property
    def keyID(self) -> KeyId: ...
    def __init__(
        self,
        *,
        index: SyncdIndex | None = ...,
        value: SyncdValue | None = ...,
        keyID: KeyId | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["index", b"index", "keyID", b"keyID", "value", b"value"]) -> bool: ...
    def ClearField(self, field_name: Literal["index", b"index", "keyID", b"keyID", "value", b"value"]) -> None: ...

@final
class ExternalBlobReference(Message):
    DESCRIPTOR: Descriptor

    MEDIAKEY_FIELD_NUMBER: int
    DIRECTPATH_FIELD_NUMBER: int
    HANDLE_FIELD_NUMBER: int
    FILESIZEBYTES_FIELD_NUMBER: int
    FILESHA256_FIELD_NUMBER: int
    FILEENCSHA256_FIELD_NUMBER: int
    mediaKey: bytes
    directPath: str
    handle: str
    fileSizeBytes: int
    fileSHA256: bytes
    fileEncSHA256: bytes
    def __init__(
        self,
        *,
        mediaKey: bytes | None = ...,
        directPath: str | None = ...,
        handle: str | None = ...,
        fileSizeBytes: int | None = ...,
        fileSHA256: bytes | None = ...,
        fileEncSHA256: bytes | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["directPath", b"directPath", "fileEncSHA256", b"fileEncSHA256", "fileSHA256", b"fileSHA256", "fileSizeBytes", b"fileSizeBytes", "handle", b"handle", "mediaKey", b"mediaKey"]) -> bool: ...
    def ClearField(self, field_name: Literal["directPath", b"directPath", "fileEncSHA256", b"fileEncSHA256", "fileSHA256", b"fileSHA256", "fileSizeBytes", b"fileSizeBytes", "handle", b"handle", "mediaKey", b"mediaKey"]) -> None: ...

@final
class SyncdSnapshot(Message):
    DESCRIPTOR: Descriptor

    VERSION_FIELD_NUMBER: int
    RECORDS_FIELD_NUMBER: int
    MAC_FIELD_NUMBER: int
    KEYID_FIELD_NUMBER: int
    mac: bytes
    @property
    def version(self) -> SyncdVersion: ...
    @property
    def records(self) -> RepeatedCompositeFieldContainer[SyncdRecord]: ...
    @property
    def keyID(self) -> KeyId: ...
    def __init__(
        self,
        *,
        version: SyncdVersion | None = ...,
        records: Iterable[SyncdRecord] | None = ...,
        mac: bytes | None = ...,
        keyID: KeyId | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["keyID", b"keyID", "mac", b"mac", "version", b"version"]) -> bool: ...
    def ClearField(self, field_name: Literal["keyID", b"keyID", "mac", b"mac", "records", b"records", "version", b"version"]) -> None: ...

@final
class SyncdMutations(Message):
    DESCRIPTOR: Descriptor

    MUTATIONS_FIELD_NUMBER: int
    @property
    def mutations(self) -> RepeatedCompositeFieldContainer[SyncdMutation]: ...
    def __init__(
        self,
        *,
        mutations: Iterable[SyncdMutation] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["mutations", b"mutations"]) -> None: ...

@final
class SyncdPatch(Message):
    DESCRIPTOR: Descriptor

    VERSION_FIELD_NUMBER: int
    MUTATIONS_FIELD_NUMBER: int
    EXTERNALMUTATIONS_FIELD_NUMBER: int
    SNAPSHOTMAC_FIELD_NUMBER: int
    PATCHMAC_FIELD_NUMBER: int
    KEYID_FIELD_NUMBER: int
    EXITCODE_FIELD_NUMBER: int
    DEVICEINDEX_FIELD_NUMBER: int
    CLIENTDEBUGDATA_FIELD_NUMBER: int
    snapshotMAC: bytes
    patchMAC: bytes
    deviceIndex: int
    clientDebugData: bytes
    @property
    def version(self) -> SyncdVersion: ...
    @property
    def mutations(self) -> RepeatedCompositeFieldContainer[SyncdMutation]: ...
    @property
    def externalMutations(self) -> ExternalBlobReference: ...
    @property
    def keyID(self) -> KeyId: ...
    @property
    def exitCode(self) -> ExitCode: ...
    def __init__(
        self,
        *,
        version: SyncdVersion | None = ...,
        mutations: Iterable[SyncdMutation] | None = ...,
        externalMutations: ExternalBlobReference | None = ...,
        snapshotMAC: bytes | None = ...,
        patchMAC: bytes | None = ...,
        keyID: KeyId | None = ...,
        exitCode: ExitCode | None = ...,
        deviceIndex: int | None = ...,
        clientDebugData: bytes | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["clientDebugData", b"clientDebugData", "deviceIndex", b"deviceIndex", "exitCode", b"exitCode", "externalMutations", b"externalMutations", "keyID", b"keyID", "patchMAC", b"patchMAC", "snapshotMAC", b"snapshotMAC", "version", b"version"]) -> bool: ...
    def ClearField(self, field_name: Literal["clientDebugData", b"clientDebugData", "deviceIndex", b"deviceIndex", "exitCode", b"exitCode", "externalMutations", b"externalMutations", "keyID", b"keyID", "mutations", b"mutations", "patchMAC", b"patchMAC", "snapshotMAC", b"snapshotMAC", "version", b"version"]) -> None: ...
