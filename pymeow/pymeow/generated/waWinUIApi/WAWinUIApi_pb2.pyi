"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import sys

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
from builtins import (
    bool,
    int,
    str,
    type,
)
from collections.abc import (
    Iterable,
)
from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
    RepeatedScalarFieldContainer,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    Literal,
    NewType,
    final,
)

DESCRIPTOR: FileDescriptor

class _PositronDataSource:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _PositronDataSourceEnumTypeWrapper(_EnumTypeWrapper[_PositronDataSource.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    MESSAGES: _PositronDataSource.ValueType  # 1
    CHATS: _PositronDataSource.ValueType  # 2
    CONTACTS: _PositronDataSource.ValueType  # 3
    GROUP_METADATA: _PositronDataSource.ValueType  # 4
    GROUP_PARTICIPANTS: _PositronDataSource.ValueType  # 5
    REACTIONS: _PositronDataSource.ValueType  # 6

class PositronDataSource(_PositronDataSource, metaclass=_PositronDataSourceEnumTypeWrapper): ...

MESSAGES: PositronDataSource.ValueType  # 1
CHATS: PositronDataSource.ValueType  # 2
CONTACTS: PositronDataSource.ValueType  # 3
GROUP_METADATA: PositronDataSource.ValueType  # 4
GROUP_PARTICIPANTS: PositronDataSource.ValueType  # 5
REACTIONS: PositronDataSource.ValueType  # 6

@final
class PositronMessage(Message):
    DESCRIPTOR: Descriptor

    @final
    class MsgKey(Message):
        DESCRIPTOR: Descriptor

        FROMME_FIELD_NUMBER: int
        REMOTE_FIELD_NUMBER: int
        ID_FIELD_NUMBER: int
        PARTICIPANT_FIELD_NUMBER: int
        fromMe: bool
        ID: str
        @property
        def remote(self) -> PositronMessage.WID: ...
        @property
        def participant(self) -> PositronMessage.WID: ...
        def __init__(
            self,
            *,
            fromMe: bool | None = ...,
            remote: PositronMessage.WID | None = ...,
            ID: str | None = ...,
            participant: PositronMessage.WID | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["ID", b"ID", "fromMe", b"fromMe", "participant", b"participant", "remote", b"remote"]) -> bool: ...
        def ClearField(self, field_name: Literal["ID", b"ID", "fromMe", b"fromMe", "participant", b"participant", "remote", b"remote"]) -> None: ...

    @final
    class WID(Message):
        DESCRIPTOR: Descriptor

        SERIALIZED_FIELD_NUMBER: int
        serialized: str
        def __init__(
            self,
            *,
            serialized: str | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["serialized", b"serialized"]) -> bool: ...
        def ClearField(self, field_name: Literal["serialized", b"serialized"]) -> None: ...

    TIMESTAMP_FIELD_NUMBER: int
    TYPE_FIELD_NUMBER: int
    BODY_FIELD_NUMBER: int
    ID_FIELD_NUMBER: int
    JSON_FIELD_NUMBER: int
    timestamp: int
    type: str
    body: str
    JSON: str
    @property
    def ID(self) -> PositronMessage.MsgKey: ...
    def __init__(
        self,
        *,
        timestamp: int | None = ...,
        type: str | None = ...,
        body: str | None = ...,
        ID: PositronMessage.MsgKey | None = ...,
        JSON: str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["ID", b"ID", "JSON", b"JSON", "body", b"body", "timestamp", b"timestamp", "type", b"type"]) -> bool: ...
    def ClearField(self, field_name: Literal["ID", b"ID", "JSON", b"JSON", "body", b"body", "timestamp", b"timestamp", "type", b"type"]) -> None: ...

@final
class PositronChat(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    TIMESTAMP_FIELD_NUMBER: int
    UNREADCOUNT_FIELD_NUMBER: int
    JSON_FIELD_NUMBER: int
    ID: str
    name: str
    timestamp: int
    unreadCount: int
    JSON: str
    def __init__(
        self,
        *,
        ID: str | None = ...,
        name: str | None = ...,
        timestamp: int | None = ...,
        unreadCount: int | None = ...,
        JSON: str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["ID", b"ID", "JSON", b"JSON", "name", b"name", "timestamp", b"timestamp", "unreadCount", b"unreadCount"]) -> bool: ...
    def ClearField(self, field_name: Literal["ID", b"ID", "JSON", b"JSON", "name", b"name", "timestamp", b"timestamp", "unreadCount", b"unreadCount"]) -> None: ...

@final
class PositronContact(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    PHONENUMBER_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    ISADDRESSBOOKCONTACT_FIELD_NUMBER: int
    JSON_FIELD_NUMBER: int
    ID: str
    phoneNumber: str
    name: str
    isAddressBookContact: bool
    JSON: str
    def __init__(
        self,
        *,
        ID: str | None = ...,
        phoneNumber: str | None = ...,
        name: str | None = ...,
        isAddressBookContact: bool | None = ...,
        JSON: str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["ID", b"ID", "JSON", b"JSON", "isAddressBookContact", b"isAddressBookContact", "name", b"name", "phoneNumber", b"phoneNumber"]) -> bool: ...
    def ClearField(self, field_name: Literal["ID", b"ID", "JSON", b"JSON", "isAddressBookContact", b"isAddressBookContact", "name", b"name", "phoneNumber", b"phoneNumber"]) -> None: ...

@final
class PositronGroupMetadata(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    SUBJECT_FIELD_NUMBER: int
    JSON_FIELD_NUMBER: int
    ID: str
    subject: str
    JSON: str
    def __init__(
        self,
        *,
        ID: str | None = ...,
        subject: str | None = ...,
        JSON: str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["ID", b"ID", "JSON", b"JSON", "subject", b"subject"]) -> bool: ...
    def ClearField(self, field_name: Literal["ID", b"ID", "JSON", b"JSON", "subject", b"subject"]) -> None: ...

@final
class PositronGroupParticipants(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    PARTICIPANTS_FIELD_NUMBER: int
    JSON_FIELD_NUMBER: int
    ID: str
    JSON: str
    @property
    def participants(self) -> RepeatedScalarFieldContainer[str]: ...
    def __init__(
        self,
        *,
        ID: str | None = ...,
        participants: Iterable[str] | None = ...,
        JSON: str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["ID", b"ID", "JSON", b"JSON"]) -> bool: ...
    def ClearField(self, field_name: Literal["ID", b"ID", "JSON", b"JSON", "participants", b"participants"]) -> None: ...

@final
class PositronReaction(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    PARENTMSGKEY_FIELD_NUMBER: int
    REACTIONTEXT_FIELD_NUMBER: int
    TIMESTAMP_FIELD_NUMBER: int
    SENDERUSERJID_FIELD_NUMBER: int
    JSON_FIELD_NUMBER: int
    ID: str
    parentMsgKey: str
    reactionText: str
    timestamp: int
    senderUserJID: str
    JSON: str
    def __init__(
        self,
        *,
        ID: str | None = ...,
        parentMsgKey: str | None = ...,
        reactionText: str | None = ...,
        timestamp: int | None = ...,
        senderUserJID: str | None = ...,
        JSON: str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["ID", b"ID", "JSON", b"JSON", "parentMsgKey", b"parentMsgKey", "reactionText", b"reactionText", "senderUserJID", b"senderUserJID", "timestamp", b"timestamp"]) -> bool: ...
    def ClearField(self, field_name: Literal["ID", b"ID", "JSON", b"JSON", "parentMsgKey", b"parentMsgKey", "reactionText", b"reactionText", "senderUserJID", b"senderUserJID", "timestamp", b"timestamp"]) -> None: ...

@final
class PositronData(Message):
    DESCRIPTOR: Descriptor

    DATASOURCE_FIELD_NUMBER: int
    MESSAGES_FIELD_NUMBER: int
    CHATS_FIELD_NUMBER: int
    CONTACTS_FIELD_NUMBER: int
    GROUPMETADATA_FIELD_NUMBER: int
    GROUPPARTICIPANTS_FIELD_NUMBER: int
    REACTIONS_FIELD_NUMBER: int
    dataSource: PositronDataSource.ValueType
    @property
    def messages(self) -> RepeatedCompositeFieldContainer[PositronMessage]: ...
    @property
    def chats(self) -> RepeatedCompositeFieldContainer[PositronChat]: ...
    @property
    def contacts(self) -> RepeatedCompositeFieldContainer[PositronContact]: ...
    @property
    def groupMetadata(self) -> RepeatedCompositeFieldContainer[PositronGroupMetadata]: ...
    @property
    def groupParticipants(self) -> RepeatedCompositeFieldContainer[PositronGroupParticipants]: ...
    @property
    def reactions(self) -> RepeatedCompositeFieldContainer[PositronReaction]: ...
    def __init__(
        self,
        *,
        dataSource: PositronDataSource.ValueType | None = ...,
        messages: Iterable[PositronMessage] | None = ...,
        chats: Iterable[PositronChat] | None = ...,
        contacts: Iterable[PositronContact] | None = ...,
        groupMetadata: Iterable[PositronGroupMetadata] | None = ...,
        groupParticipants: Iterable[PositronGroupParticipants] | None = ...,
        reactions: Iterable[PositronReaction] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["dataSource", b"dataSource"]) -> bool: ...
    def ClearField(self, field_name: Literal["chats", b"chats", "contacts", b"contacts", "dataSource", b"dataSource", "groupMetadata", b"groupMetadata", "groupParticipants", b"groupParticipants", "messages", b"messages", "reactions", b"reactions"]) -> None: ...
