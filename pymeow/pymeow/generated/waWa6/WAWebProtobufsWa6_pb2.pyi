"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import sys

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
from builtins import (
    bool,
    bytes,
    int,
    str,
    type,
)
from collections.abc import (
    Iterable,
)
from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    RepeatedScalarFieldContainer,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    Literal,
    NewType,
    final,
)

DESCRIPTOR: FileDescriptor

@final
class ClientPayload(Message):
    DESCRIPTOR: Descriptor

    class _TrafficAnonymization:
        ValueType = NewType("ValueType", int)
        V: typing_extensions.TypeAlias = ValueType

    class _TrafficAnonymizationEnumTypeWrapper(_EnumTypeWrapper[ClientPayload._TrafficAnonymization.ValueType], type):
        DESCRIPTOR: EnumDescriptor
        OFF: ClientPayload._TrafficAnonymization.ValueType  # 0
        STANDARD: ClientPayload._TrafficAnonymization.ValueType  # 1

    class TrafficAnonymization(_TrafficAnonymization, metaclass=_TrafficAnonymizationEnumTypeWrapper): ...
    OFF: ClientPayload.TrafficAnonymization.ValueType  # 0
    STANDARD: ClientPayload.TrafficAnonymization.ValueType  # 1

    class _AccountType:
        ValueType = NewType("ValueType", int)
        V: typing_extensions.TypeAlias = ValueType

    class _AccountTypeEnumTypeWrapper(_EnumTypeWrapper[ClientPayload._AccountType.ValueType], type):
        DESCRIPTOR: EnumDescriptor
        DEFAULT: ClientPayload._AccountType.ValueType  # 0
        GUEST: ClientPayload._AccountType.ValueType  # 1

    class AccountType(_AccountType, metaclass=_AccountTypeEnumTypeWrapper): ...
    DEFAULT: ClientPayload.AccountType.ValueType  # 0
    GUEST: ClientPayload.AccountType.ValueType  # 1

    class _Product:
        ValueType = NewType("ValueType", int)
        V: typing_extensions.TypeAlias = ValueType

    class _ProductEnumTypeWrapper(_EnumTypeWrapper[ClientPayload._Product.ValueType], type):
        DESCRIPTOR: EnumDescriptor
        WHATSAPP: ClientPayload._Product.ValueType  # 0
        MESSENGER: ClientPayload._Product.ValueType  # 1
        INTEROP: ClientPayload._Product.ValueType  # 2
        INTEROP_MSGR: ClientPayload._Product.ValueType  # 3
        WHATSAPP_LID: ClientPayload._Product.ValueType  # 4

    class Product(_Product, metaclass=_ProductEnumTypeWrapper): ...
    WHATSAPP: ClientPayload.Product.ValueType  # 0
    MESSENGER: ClientPayload.Product.ValueType  # 1
    INTEROP: ClientPayload.Product.ValueType  # 2
    INTEROP_MSGR: ClientPayload.Product.ValueType  # 3
    WHATSAPP_LID: ClientPayload.Product.ValueType  # 4

    class _ConnectType:
        ValueType = NewType("ValueType", int)
        V: typing_extensions.TypeAlias = ValueType

    class _ConnectTypeEnumTypeWrapper(_EnumTypeWrapper[ClientPayload._ConnectType.ValueType], type):
        DESCRIPTOR: EnumDescriptor
        CELLULAR_UNKNOWN: ClientPayload._ConnectType.ValueType  # 0
        WIFI_UNKNOWN: ClientPayload._ConnectType.ValueType  # 1
        CELLULAR_EDGE: ClientPayload._ConnectType.ValueType  # 100
        CELLULAR_IDEN: ClientPayload._ConnectType.ValueType  # 101
        CELLULAR_UMTS: ClientPayload._ConnectType.ValueType  # 102
        CELLULAR_EVDO: ClientPayload._ConnectType.ValueType  # 103
        CELLULAR_GPRS: ClientPayload._ConnectType.ValueType  # 104
        CELLULAR_HSDPA: ClientPayload._ConnectType.ValueType  # 105
        CELLULAR_HSUPA: ClientPayload._ConnectType.ValueType  # 106
        CELLULAR_HSPA: ClientPayload._ConnectType.ValueType  # 107
        CELLULAR_CDMA: ClientPayload._ConnectType.ValueType  # 108
        CELLULAR_1XRTT: ClientPayload._ConnectType.ValueType  # 109
        CELLULAR_EHRPD: ClientPayload._ConnectType.ValueType  # 110
        CELLULAR_LTE: ClientPayload._ConnectType.ValueType  # 111
        CELLULAR_HSPAP: ClientPayload._ConnectType.ValueType  # 112

    class ConnectType(_ConnectType, metaclass=_ConnectTypeEnumTypeWrapper): ...
    CELLULAR_UNKNOWN: ClientPayload.ConnectType.ValueType  # 0
    WIFI_UNKNOWN: ClientPayload.ConnectType.ValueType  # 1
    CELLULAR_EDGE: ClientPayload.ConnectType.ValueType  # 100
    CELLULAR_IDEN: ClientPayload.ConnectType.ValueType  # 101
    CELLULAR_UMTS: ClientPayload.ConnectType.ValueType  # 102
    CELLULAR_EVDO: ClientPayload.ConnectType.ValueType  # 103
    CELLULAR_GPRS: ClientPayload.ConnectType.ValueType  # 104
    CELLULAR_HSDPA: ClientPayload.ConnectType.ValueType  # 105
    CELLULAR_HSUPA: ClientPayload.ConnectType.ValueType  # 106
    CELLULAR_HSPA: ClientPayload.ConnectType.ValueType  # 107
    CELLULAR_CDMA: ClientPayload.ConnectType.ValueType  # 108
    CELLULAR_1XRTT: ClientPayload.ConnectType.ValueType  # 109
    CELLULAR_EHRPD: ClientPayload.ConnectType.ValueType  # 110
    CELLULAR_LTE: ClientPayload.ConnectType.ValueType  # 111
    CELLULAR_HSPAP: ClientPayload.ConnectType.ValueType  # 112

    class _ConnectReason:
        ValueType = NewType("ValueType", int)
        V: typing_extensions.TypeAlias = ValueType

    class _ConnectReasonEnumTypeWrapper(_EnumTypeWrapper[ClientPayload._ConnectReason.ValueType], type):
        DESCRIPTOR: EnumDescriptor
        PUSH: ClientPayload._ConnectReason.ValueType  # 0
        USER_ACTIVATED: ClientPayload._ConnectReason.ValueType  # 1
        SCHEDULED: ClientPayload._ConnectReason.ValueType  # 2
        ERROR_RECONNECT: ClientPayload._ConnectReason.ValueType  # 3
        NETWORK_SWITCH: ClientPayload._ConnectReason.ValueType  # 4
        PING_RECONNECT: ClientPayload._ConnectReason.ValueType  # 5
        UNKNOWN: ClientPayload._ConnectReason.ValueType  # 6

    class ConnectReason(_ConnectReason, metaclass=_ConnectReasonEnumTypeWrapper): ...
    PUSH: ClientPayload.ConnectReason.ValueType  # 0
    USER_ACTIVATED: ClientPayload.ConnectReason.ValueType  # 1
    SCHEDULED: ClientPayload.ConnectReason.ValueType  # 2
    ERROR_RECONNECT: ClientPayload.ConnectReason.ValueType  # 3
    NETWORK_SWITCH: ClientPayload.ConnectReason.ValueType  # 4
    PING_RECONNECT: ClientPayload.ConnectReason.ValueType  # 5
    UNKNOWN: ClientPayload.ConnectReason.ValueType  # 6

    class _IOSAppExtension:
        ValueType = NewType("ValueType", int)
        V: typing_extensions.TypeAlias = ValueType

    class _IOSAppExtensionEnumTypeWrapper(_EnumTypeWrapper[ClientPayload._IOSAppExtension.ValueType], type):
        DESCRIPTOR: EnumDescriptor
        SHARE_EXTENSION: ClientPayload._IOSAppExtension.ValueType  # 0
        SERVICE_EXTENSION: ClientPayload._IOSAppExtension.ValueType  # 1
        INTENTS_EXTENSION: ClientPayload._IOSAppExtension.ValueType  # 2

    class IOSAppExtension(_IOSAppExtension, metaclass=_IOSAppExtensionEnumTypeWrapper): ...
    SHARE_EXTENSION: ClientPayload.IOSAppExtension.ValueType  # 0
    SERVICE_EXTENSION: ClientPayload.IOSAppExtension.ValueType  # 1
    INTENTS_EXTENSION: ClientPayload.IOSAppExtension.ValueType  # 2

    @final
    class DNSSource(Message):
        DESCRIPTOR: Descriptor

        class _DNSResolutionMethod:
            ValueType = NewType("ValueType", int)
            V: typing_extensions.TypeAlias = ValueType

        class _DNSResolutionMethodEnumTypeWrapper(_EnumTypeWrapper[ClientPayload.DNSSource._DNSResolutionMethod.ValueType], type):
            DESCRIPTOR: EnumDescriptor
            SYSTEM: ClientPayload.DNSSource._DNSResolutionMethod.ValueType  # 0
            GOOGLE: ClientPayload.DNSSource._DNSResolutionMethod.ValueType  # 1
            HARDCODED: ClientPayload.DNSSource._DNSResolutionMethod.ValueType  # 2
            OVERRIDE: ClientPayload.DNSSource._DNSResolutionMethod.ValueType  # 3
            FALLBACK: ClientPayload.DNSSource._DNSResolutionMethod.ValueType  # 4
            MNS: ClientPayload.DNSSource._DNSResolutionMethod.ValueType  # 5

        class DNSResolutionMethod(_DNSResolutionMethod, metaclass=_DNSResolutionMethodEnumTypeWrapper): ...
        SYSTEM: ClientPayload.DNSSource.DNSResolutionMethod.ValueType  # 0
        GOOGLE: ClientPayload.DNSSource.DNSResolutionMethod.ValueType  # 1
        HARDCODED: ClientPayload.DNSSource.DNSResolutionMethod.ValueType  # 2
        OVERRIDE: ClientPayload.DNSSource.DNSResolutionMethod.ValueType  # 3
        FALLBACK: ClientPayload.DNSSource.DNSResolutionMethod.ValueType  # 4
        MNS: ClientPayload.DNSSource.DNSResolutionMethod.ValueType  # 5

        DNSMETHOD_FIELD_NUMBER: int
        APPCACHED_FIELD_NUMBER: int
        dnsMethod: ClientPayload.DNSSource.DNSResolutionMethod.ValueType
        appCached: bool
        def __init__(
            self,
            *,
            dnsMethod: ClientPayload.DNSSource.DNSResolutionMethod.ValueType | None = ...,
            appCached: bool | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["appCached", b"appCached", "dnsMethod", b"dnsMethod"]) -> bool: ...
        def ClearField(self, field_name: Literal["appCached", b"appCached", "dnsMethod", b"dnsMethod"]) -> None: ...

    @final
    class WebInfo(Message):
        DESCRIPTOR: Descriptor

        class _WebSubPlatform:
            ValueType = NewType("ValueType", int)
            V: typing_extensions.TypeAlias = ValueType

        class _WebSubPlatformEnumTypeWrapper(_EnumTypeWrapper[ClientPayload.WebInfo._WebSubPlatform.ValueType], type):
            DESCRIPTOR: EnumDescriptor
            WEB_BROWSER: ClientPayload.WebInfo._WebSubPlatform.ValueType  # 0
            APP_STORE: ClientPayload.WebInfo._WebSubPlatform.ValueType  # 1
            WIN_STORE: ClientPayload.WebInfo._WebSubPlatform.ValueType  # 2
            DARWIN: ClientPayload.WebInfo._WebSubPlatform.ValueType  # 3
            WIN32: ClientPayload.WebInfo._WebSubPlatform.ValueType  # 4
            WIN_HYBRID: ClientPayload.WebInfo._WebSubPlatform.ValueType  # 5

        class WebSubPlatform(_WebSubPlatform, metaclass=_WebSubPlatformEnumTypeWrapper): ...
        WEB_BROWSER: ClientPayload.WebInfo.WebSubPlatform.ValueType  # 0
        APP_STORE: ClientPayload.WebInfo.WebSubPlatform.ValueType  # 1
        WIN_STORE: ClientPayload.WebInfo.WebSubPlatform.ValueType  # 2
        DARWIN: ClientPayload.WebInfo.WebSubPlatform.ValueType  # 3
        WIN32: ClientPayload.WebInfo.WebSubPlatform.ValueType  # 4
        WIN_HYBRID: ClientPayload.WebInfo.WebSubPlatform.ValueType  # 5

        @final
        class WebdPayload(Message):
            DESCRIPTOR: Descriptor

            USESPARTICIPANTINKEY_FIELD_NUMBER: int
            SUPPORTSSTARREDMESSAGES_FIELD_NUMBER: int
            SUPPORTSDOCUMENTMESSAGES_FIELD_NUMBER: int
            SUPPORTSURLMESSAGES_FIELD_NUMBER: int
            SUPPORTSMEDIARETRY_FIELD_NUMBER: int
            SUPPORTSE2EIMAGE_FIELD_NUMBER: int
            SUPPORTSE2EVIDEO_FIELD_NUMBER: int
            SUPPORTSE2EAUDIO_FIELD_NUMBER: int
            SUPPORTSE2EDOCUMENT_FIELD_NUMBER: int
            DOCUMENTTYPES_FIELD_NUMBER: int
            FEATURES_FIELD_NUMBER: int
            usesParticipantInKey: bool
            supportsStarredMessages: bool
            supportsDocumentMessages: bool
            supportsURLMessages: bool
            supportsMediaRetry: bool
            supportsE2EImage: bool
            supportsE2EVideo: bool
            supportsE2EAudio: bool
            supportsE2EDocument: bool
            documentTypes: str
            features: bytes
            def __init__(
                self,
                *,
                usesParticipantInKey: bool | None = ...,
                supportsStarredMessages: bool | None = ...,
                supportsDocumentMessages: bool | None = ...,
                supportsURLMessages: bool | None = ...,
                supportsMediaRetry: bool | None = ...,
                supportsE2EImage: bool | None = ...,
                supportsE2EVideo: bool | None = ...,
                supportsE2EAudio: bool | None = ...,
                supportsE2EDocument: bool | None = ...,
                documentTypes: str | None = ...,
                features: bytes | None = ...,
            ) -> None: ...
            def HasField(self, field_name: Literal["documentTypes", b"documentTypes", "features", b"features", "supportsDocumentMessages", b"supportsDocumentMessages", "supportsE2EAudio", b"supportsE2EAudio", "supportsE2EDocument", b"supportsE2EDocument", "supportsE2EImage", b"supportsE2EImage", "supportsE2EVideo", b"supportsE2EVideo", "supportsMediaRetry", b"supportsMediaRetry", "supportsStarredMessages", b"supportsStarredMessages", "supportsURLMessages", b"supportsURLMessages", "usesParticipantInKey", b"usesParticipantInKey"]) -> bool: ...
            def ClearField(self, field_name: Literal["documentTypes", b"documentTypes", "features", b"features", "supportsDocumentMessages", b"supportsDocumentMessages", "supportsE2EAudio", b"supportsE2EAudio", "supportsE2EDocument", b"supportsE2EDocument", "supportsE2EImage", b"supportsE2EImage", "supportsE2EVideo", b"supportsE2EVideo", "supportsMediaRetry", b"supportsMediaRetry", "supportsStarredMessages", b"supportsStarredMessages", "supportsURLMessages", b"supportsURLMessages", "usesParticipantInKey", b"usesParticipantInKey"]) -> None: ...

        REFTOKEN_FIELD_NUMBER: int
        VERSION_FIELD_NUMBER: int
        WEBDPAYLOAD_FIELD_NUMBER: int
        WEBSUBPLATFORM_FIELD_NUMBER: int
        refToken: str
        version: str
        webSubPlatform: ClientPayload.WebInfo.WebSubPlatform.ValueType
        @property
        def webdPayload(self) -> ClientPayload.WebInfo.WebdPayload: ...
        def __init__(
            self,
            *,
            refToken: str | None = ...,
            version: str | None = ...,
            webdPayload: ClientPayload.WebInfo.WebdPayload | None = ...,
            webSubPlatform: ClientPayload.WebInfo.WebSubPlatform.ValueType | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["refToken", b"refToken", "version", b"version", "webSubPlatform", b"webSubPlatform", "webdPayload", b"webdPayload"]) -> bool: ...
        def ClearField(self, field_name: Literal["refToken", b"refToken", "version", b"version", "webSubPlatform", b"webSubPlatform", "webdPayload", b"webdPayload"]) -> None: ...

    @final
    class UserAgent(Message):
        DESCRIPTOR: Descriptor

        class _DeviceType:
            ValueType = NewType("ValueType", int)
            V: typing_extensions.TypeAlias = ValueType

        class _DeviceTypeEnumTypeWrapper(_EnumTypeWrapper[ClientPayload.UserAgent._DeviceType.ValueType], type):
            DESCRIPTOR: EnumDescriptor
            PHONE: ClientPayload.UserAgent._DeviceType.ValueType  # 0
            TABLET: ClientPayload.UserAgent._DeviceType.ValueType  # 1
            DESKTOP: ClientPayload.UserAgent._DeviceType.ValueType  # 2
            WEARABLE: ClientPayload.UserAgent._DeviceType.ValueType  # 3
            VR: ClientPayload.UserAgent._DeviceType.ValueType  # 4

        class DeviceType(_DeviceType, metaclass=_DeviceTypeEnumTypeWrapper): ...
        PHONE: ClientPayload.UserAgent.DeviceType.ValueType  # 0
        TABLET: ClientPayload.UserAgent.DeviceType.ValueType  # 1
        DESKTOP: ClientPayload.UserAgent.DeviceType.ValueType  # 2
        WEARABLE: ClientPayload.UserAgent.DeviceType.ValueType  # 3
        VR: ClientPayload.UserAgent.DeviceType.ValueType  # 4

        class _ReleaseChannel:
            ValueType = NewType("ValueType", int)
            V: typing_extensions.TypeAlias = ValueType

        class _ReleaseChannelEnumTypeWrapper(_EnumTypeWrapper[ClientPayload.UserAgent._ReleaseChannel.ValueType], type):
            DESCRIPTOR: EnumDescriptor
            RELEASE: ClientPayload.UserAgent._ReleaseChannel.ValueType  # 0
            BETA: ClientPayload.UserAgent._ReleaseChannel.ValueType  # 1
            ALPHA: ClientPayload.UserAgent._ReleaseChannel.ValueType  # 2
            DEBUG: ClientPayload.UserAgent._ReleaseChannel.ValueType  # 3

        class ReleaseChannel(_ReleaseChannel, metaclass=_ReleaseChannelEnumTypeWrapper): ...
        RELEASE: ClientPayload.UserAgent.ReleaseChannel.ValueType  # 0
        BETA: ClientPayload.UserAgent.ReleaseChannel.ValueType  # 1
        ALPHA: ClientPayload.UserAgent.ReleaseChannel.ValueType  # 2
        DEBUG: ClientPayload.UserAgent.ReleaseChannel.ValueType  # 3

        class _Platform:
            ValueType = NewType("ValueType", int)
            V: typing_extensions.TypeAlias = ValueType

        class _PlatformEnumTypeWrapper(_EnumTypeWrapper[ClientPayload.UserAgent._Platform.ValueType], type):
            DESCRIPTOR: EnumDescriptor
            ANDROID: ClientPayload.UserAgent._Platform.ValueType  # 0
            IOS: ClientPayload.UserAgent._Platform.ValueType  # 1
            WINDOWS_PHONE: ClientPayload.UserAgent._Platform.ValueType  # 2
            BLACKBERRY: ClientPayload.UserAgent._Platform.ValueType  # 3
            BLACKBERRYX: ClientPayload.UserAgent._Platform.ValueType  # 4
            S40: ClientPayload.UserAgent._Platform.ValueType  # 5
            S60: ClientPayload.UserAgent._Platform.ValueType  # 6
            PYTHON_CLIENT: ClientPayload.UserAgent._Platform.ValueType  # 7
            TIZEN: ClientPayload.UserAgent._Platform.ValueType  # 8
            ENTERPRISE: ClientPayload.UserAgent._Platform.ValueType  # 9
            SMB_ANDROID: ClientPayload.UserAgent._Platform.ValueType  # 10
            KAIOS: ClientPayload.UserAgent._Platform.ValueType  # 11
            SMB_IOS: ClientPayload.UserAgent._Platform.ValueType  # 12
            WINDOWS: ClientPayload.UserAgent._Platform.ValueType  # 13
            WEB: ClientPayload.UserAgent._Platform.ValueType  # 14
            PORTAL: ClientPayload.UserAgent._Platform.ValueType  # 15
            GREEN_ANDROID: ClientPayload.UserAgent._Platform.ValueType  # 16
            GREEN_IPHONE: ClientPayload.UserAgent._Platform.ValueType  # 17
            BLUE_ANDROID: ClientPayload.UserAgent._Platform.ValueType  # 18
            BLUE_IPHONE: ClientPayload.UserAgent._Platform.ValueType  # 19
            FBLITE_ANDROID: ClientPayload.UserAgent._Platform.ValueType  # 20
            MLITE_ANDROID: ClientPayload.UserAgent._Platform.ValueType  # 21
            IGLITE_ANDROID: ClientPayload.UserAgent._Platform.ValueType  # 22
            PAGE: ClientPayload.UserAgent._Platform.ValueType  # 23
            MACOS: ClientPayload.UserAgent._Platform.ValueType  # 24
            OCULUS_MSG: ClientPayload.UserAgent._Platform.ValueType  # 25
            OCULUS_CALL: ClientPayload.UserAgent._Platform.ValueType  # 26
            MILAN: ClientPayload.UserAgent._Platform.ValueType  # 27
            CAPI: ClientPayload.UserAgent._Platform.ValueType  # 28
            WEAROS: ClientPayload.UserAgent._Platform.ValueType  # 29
            ARDEVICE: ClientPayload.UserAgent._Platform.ValueType  # 30
            VRDEVICE: ClientPayload.UserAgent._Platform.ValueType  # 31
            BLUE_WEB: ClientPayload.UserAgent._Platform.ValueType  # 32
            IPAD: ClientPayload.UserAgent._Platform.ValueType  # 33
            TEST: ClientPayload.UserAgent._Platform.ValueType  # 34
            SMART_GLASSES: ClientPayload.UserAgent._Platform.ValueType  # 35

        class Platform(_Platform, metaclass=_PlatformEnumTypeWrapper): ...
        ANDROID: ClientPayload.UserAgent.Platform.ValueType  # 0
        IOS: ClientPayload.UserAgent.Platform.ValueType  # 1
        WINDOWS_PHONE: ClientPayload.UserAgent.Platform.ValueType  # 2
        BLACKBERRY: ClientPayload.UserAgent.Platform.ValueType  # 3
        BLACKBERRYX: ClientPayload.UserAgent.Platform.ValueType  # 4
        S40: ClientPayload.UserAgent.Platform.ValueType  # 5
        S60: ClientPayload.UserAgent.Platform.ValueType  # 6
        PYTHON_CLIENT: ClientPayload.UserAgent.Platform.ValueType  # 7
        TIZEN: ClientPayload.UserAgent.Platform.ValueType  # 8
        ENTERPRISE: ClientPayload.UserAgent.Platform.ValueType  # 9
        SMB_ANDROID: ClientPayload.UserAgent.Platform.ValueType  # 10
        KAIOS: ClientPayload.UserAgent.Platform.ValueType  # 11
        SMB_IOS: ClientPayload.UserAgent.Platform.ValueType  # 12
        WINDOWS: ClientPayload.UserAgent.Platform.ValueType  # 13
        WEB: ClientPayload.UserAgent.Platform.ValueType  # 14
        PORTAL: ClientPayload.UserAgent.Platform.ValueType  # 15
        GREEN_ANDROID: ClientPayload.UserAgent.Platform.ValueType  # 16
        GREEN_IPHONE: ClientPayload.UserAgent.Platform.ValueType  # 17
        BLUE_ANDROID: ClientPayload.UserAgent.Platform.ValueType  # 18
        BLUE_IPHONE: ClientPayload.UserAgent.Platform.ValueType  # 19
        FBLITE_ANDROID: ClientPayload.UserAgent.Platform.ValueType  # 20
        MLITE_ANDROID: ClientPayload.UserAgent.Platform.ValueType  # 21
        IGLITE_ANDROID: ClientPayload.UserAgent.Platform.ValueType  # 22
        PAGE: ClientPayload.UserAgent.Platform.ValueType  # 23
        MACOS: ClientPayload.UserAgent.Platform.ValueType  # 24
        OCULUS_MSG: ClientPayload.UserAgent.Platform.ValueType  # 25
        OCULUS_CALL: ClientPayload.UserAgent.Platform.ValueType  # 26
        MILAN: ClientPayload.UserAgent.Platform.ValueType  # 27
        CAPI: ClientPayload.UserAgent.Platform.ValueType  # 28
        WEAROS: ClientPayload.UserAgent.Platform.ValueType  # 29
        ARDEVICE: ClientPayload.UserAgent.Platform.ValueType  # 30
        VRDEVICE: ClientPayload.UserAgent.Platform.ValueType  # 31
        BLUE_WEB: ClientPayload.UserAgent.Platform.ValueType  # 32
        IPAD: ClientPayload.UserAgent.Platform.ValueType  # 33
        TEST: ClientPayload.UserAgent.Platform.ValueType  # 34
        SMART_GLASSES: ClientPayload.UserAgent.Platform.ValueType  # 35

        @final
        class AppVersion(Message):
            DESCRIPTOR: Descriptor

            PRIMARY_FIELD_NUMBER: int
            SECONDARY_FIELD_NUMBER: int
            TERTIARY_FIELD_NUMBER: int
            QUATERNARY_FIELD_NUMBER: int
            QUINARY_FIELD_NUMBER: int
            primary: int
            secondary: int
            tertiary: int
            quaternary: int
            quinary: int
            def __init__(
                self,
                *,
                primary: int | None = ...,
                secondary: int | None = ...,
                tertiary: int | None = ...,
                quaternary: int | None = ...,
                quinary: int | None = ...,
            ) -> None: ...
            def HasField(self, field_name: Literal["primary", b"primary", "quaternary", b"quaternary", "quinary", b"quinary", "secondary", b"secondary", "tertiary", b"tertiary"]) -> bool: ...
            def ClearField(self, field_name: Literal["primary", b"primary", "quaternary", b"quaternary", "quinary", b"quinary", "secondary", b"secondary", "tertiary", b"tertiary"]) -> None: ...

        PLATFORM_FIELD_NUMBER: int
        APPVERSION_FIELD_NUMBER: int
        MCC_FIELD_NUMBER: int
        MNC_FIELD_NUMBER: int
        OSVERSION_FIELD_NUMBER: int
        MANUFACTURER_FIELD_NUMBER: int
        DEVICE_FIELD_NUMBER: int
        OSBUILDNUMBER_FIELD_NUMBER: int
        PHONEID_FIELD_NUMBER: int
        RELEASECHANNEL_FIELD_NUMBER: int
        LOCALELANGUAGEISO6391_FIELD_NUMBER: int
        LOCALECOUNTRYISO31661ALPHA2_FIELD_NUMBER: int
        DEVICEBOARD_FIELD_NUMBER: int
        DEVICEEXPID_FIELD_NUMBER: int
        DEVICETYPE_FIELD_NUMBER: int
        DEVICEMODELTYPE_FIELD_NUMBER: int
        platform: ClientPayload.UserAgent.Platform.ValueType
        mcc: str
        mnc: str
        osVersion: str
        manufacturer: str
        device: str
        osBuildNumber: str
        phoneID: str
        releaseChannel: ClientPayload.UserAgent.ReleaseChannel.ValueType
        localeLanguageIso6391: str
        localeCountryIso31661Alpha2: str
        deviceBoard: str
        deviceExpID: str
        deviceType: ClientPayload.UserAgent.DeviceType.ValueType
        deviceModelType: str
        @property
        def appVersion(self) -> ClientPayload.UserAgent.AppVersion: ...
        def __init__(
            self,
            *,
            platform: ClientPayload.UserAgent.Platform.ValueType | None = ...,
            appVersion: ClientPayload.UserAgent.AppVersion | None = ...,
            mcc: str | None = ...,
            mnc: str | None = ...,
            osVersion: str | None = ...,
            manufacturer: str | None = ...,
            device: str | None = ...,
            osBuildNumber: str | None = ...,
            phoneID: str | None = ...,
            releaseChannel: ClientPayload.UserAgent.ReleaseChannel.ValueType | None = ...,
            localeLanguageIso6391: str | None = ...,
            localeCountryIso31661Alpha2: str | None = ...,
            deviceBoard: str | None = ...,
            deviceExpID: str | None = ...,
            deviceType: ClientPayload.UserAgent.DeviceType.ValueType | None = ...,
            deviceModelType: str | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["appVersion", b"appVersion", "device", b"device", "deviceBoard", b"deviceBoard", "deviceExpID", b"deviceExpID", "deviceModelType", b"deviceModelType", "deviceType", b"deviceType", "localeCountryIso31661Alpha2", b"localeCountryIso31661Alpha2", "localeLanguageIso6391", b"localeLanguageIso6391", "manufacturer", b"manufacturer", "mcc", b"mcc", "mnc", b"mnc", "osBuildNumber", b"osBuildNumber", "osVersion", b"osVersion", "phoneID", b"phoneID", "platform", b"platform", "releaseChannel", b"releaseChannel"]) -> bool: ...
        def ClearField(self, field_name: Literal["appVersion", b"appVersion", "device", b"device", "deviceBoard", b"deviceBoard", "deviceExpID", b"deviceExpID", "deviceModelType", b"deviceModelType", "deviceType", b"deviceType", "localeCountryIso31661Alpha2", b"localeCountryIso31661Alpha2", "localeLanguageIso6391", b"localeLanguageIso6391", "manufacturer", b"manufacturer", "mcc", b"mcc", "mnc", b"mnc", "osBuildNumber", b"osBuildNumber", "osVersion", b"osVersion", "phoneID", b"phoneID", "platform", b"platform", "releaseChannel", b"releaseChannel"]) -> None: ...

    @final
    class InteropData(Message):
        DESCRIPTOR: Descriptor

        ACCOUNTID_FIELD_NUMBER: int
        TOKEN_FIELD_NUMBER: int
        ENABLEREADRECEIPTS_FIELD_NUMBER: int
        accountID: int
        token: bytes
        enableReadReceipts: bool
        def __init__(
            self,
            *,
            accountID: int | None = ...,
            token: bytes | None = ...,
            enableReadReceipts: bool | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["accountID", b"accountID", "enableReadReceipts", b"enableReadReceipts", "token", b"token"]) -> bool: ...
        def ClearField(self, field_name: Literal["accountID", b"accountID", "enableReadReceipts", b"enableReadReceipts", "token", b"token"]) -> None: ...

    @final
    class DevicePairingRegistrationData(Message):
        DESCRIPTOR: Descriptor

        EREGID_FIELD_NUMBER: int
        EKEYTYPE_FIELD_NUMBER: int
        EIDENT_FIELD_NUMBER: int
        ESKEYID_FIELD_NUMBER: int
        ESKEYVAL_FIELD_NUMBER: int
        ESKEYSIG_FIELD_NUMBER: int
        BUILDHASH_FIELD_NUMBER: int
        DEVICEPROPS_FIELD_NUMBER: int
        eRegid: bytes
        eKeytype: bytes
        eIdent: bytes
        eSkeyID: bytes
        eSkeyVal: bytes
        eSkeySig: bytes
        buildHash: bytes
        deviceProps: bytes
        def __init__(
            self,
            *,
            eRegid: bytes | None = ...,
            eKeytype: bytes | None = ...,
            eIdent: bytes | None = ...,
            eSkeyID: bytes | None = ...,
            eSkeyVal: bytes | None = ...,
            eSkeySig: bytes | None = ...,
            buildHash: bytes | None = ...,
            deviceProps: bytes | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["buildHash", b"buildHash", "deviceProps", b"deviceProps", "eIdent", b"eIdent", "eKeytype", b"eKeytype", "eRegid", b"eRegid", "eSkeyID", b"eSkeyID", "eSkeySig", b"eSkeySig", "eSkeyVal", b"eSkeyVal"]) -> bool: ...
        def ClearField(self, field_name: Literal["buildHash", b"buildHash", "deviceProps", b"deviceProps", "eIdent", b"eIdent", "eKeytype", b"eKeytype", "eRegid", b"eRegid", "eSkeyID", b"eSkeyID", "eSkeySig", b"eSkeySig", "eSkeyVal", b"eSkeyVal"]) -> None: ...

    USERNAME_FIELD_NUMBER: int
    PASSIVE_FIELD_NUMBER: int
    USERAGENT_FIELD_NUMBER: int
    WEBINFO_FIELD_NUMBER: int
    PUSHNAME_FIELD_NUMBER: int
    SESSIONID_FIELD_NUMBER: int
    SHORTCONNECT_FIELD_NUMBER: int
    CONNECTTYPE_FIELD_NUMBER: int
    CONNECTREASON_FIELD_NUMBER: int
    SHARDS_FIELD_NUMBER: int
    DNSSOURCE_FIELD_NUMBER: int
    CONNECTATTEMPTCOUNT_FIELD_NUMBER: int
    DEVICE_FIELD_NUMBER: int
    DEVICEPAIRINGDATA_FIELD_NUMBER: int
    PRODUCT_FIELD_NUMBER: int
    FBCAT_FIELD_NUMBER: int
    FBUSERAGENT_FIELD_NUMBER: int
    OC_FIELD_NUMBER: int
    LC_FIELD_NUMBER: int
    IOSAPPEXTENSION_FIELD_NUMBER: int
    FBAPPID_FIELD_NUMBER: int
    FBDEVICEID_FIELD_NUMBER: int
    PULL_FIELD_NUMBER: int
    PADDINGBYTES_FIELD_NUMBER: int
    YEARCLASS_FIELD_NUMBER: int
    MEMCLASS_FIELD_NUMBER: int
    INTEROPDATA_FIELD_NUMBER: int
    TRAFFICANONYMIZATION_FIELD_NUMBER: int
    LIDDBMIGRATED_FIELD_NUMBER: int
    ACCOUNTTYPE_FIELD_NUMBER: int
    username: int
    passive: bool
    pushName: str
    sessionID: int
    shortConnect: bool
    connectType: ClientPayload.ConnectType.ValueType
    connectReason: ClientPayload.ConnectReason.ValueType
    connectAttemptCount: int
    device: int
    product: ClientPayload.Product.ValueType
    fbCat: bytes
    fbUserAgent: bytes
    oc: bool
    lc: int
    iosAppExtension: ClientPayload.IOSAppExtension.ValueType
    fbAppID: int
    fbDeviceID: bytes
    pull: bool
    paddingBytes: bytes
    yearClass: int
    memClass: int
    trafficAnonymization: ClientPayload.TrafficAnonymization.ValueType
    lidDbMigrated: bool
    accountType: ClientPayload.AccountType.ValueType
    @property
    def userAgent(self) -> ClientPayload.UserAgent: ...
    @property
    def webInfo(self) -> ClientPayload.WebInfo: ...
    @property
    def shards(self) -> RepeatedScalarFieldContainer[int]: ...
    @property
    def dnsSource(self) -> ClientPayload.DNSSource: ...
    @property
    def devicePairingData(self) -> ClientPayload.DevicePairingRegistrationData: ...
    @property
    def interopData(self) -> ClientPayload.InteropData: ...
    def __init__(
        self,
        *,
        username: int | None = ...,
        passive: bool | None = ...,
        userAgent: ClientPayload.UserAgent | None = ...,
        webInfo: ClientPayload.WebInfo | None = ...,
        pushName: str | None = ...,
        sessionID: int | None = ...,
        shortConnect: bool | None = ...,
        connectType: ClientPayload.ConnectType.ValueType | None = ...,
        connectReason: ClientPayload.ConnectReason.ValueType | None = ...,
        shards: Iterable[int] | None = ...,
        dnsSource: ClientPayload.DNSSource | None = ...,
        connectAttemptCount: int | None = ...,
        device: int | None = ...,
        devicePairingData: ClientPayload.DevicePairingRegistrationData | None = ...,
        product: ClientPayload.Product.ValueType | None = ...,
        fbCat: bytes | None = ...,
        fbUserAgent: bytes | None = ...,
        oc: bool | None = ...,
        lc: int | None = ...,
        iosAppExtension: ClientPayload.IOSAppExtension.ValueType | None = ...,
        fbAppID: int | None = ...,
        fbDeviceID: bytes | None = ...,
        pull: bool | None = ...,
        paddingBytes: bytes | None = ...,
        yearClass: int | None = ...,
        memClass: int | None = ...,
        interopData: ClientPayload.InteropData | None = ...,
        trafficAnonymization: ClientPayload.TrafficAnonymization.ValueType | None = ...,
        lidDbMigrated: bool | None = ...,
        accountType: ClientPayload.AccountType.ValueType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["accountType", b"accountType", "connectAttemptCount", b"connectAttemptCount", "connectReason", b"connectReason", "connectType", b"connectType", "device", b"device", "devicePairingData", b"devicePairingData", "dnsSource", b"dnsSource", "fbAppID", b"fbAppID", "fbCat", b"fbCat", "fbDeviceID", b"fbDeviceID", "fbUserAgent", b"fbUserAgent", "interopData", b"interopData", "iosAppExtension", b"iosAppExtension", "lc", b"lc", "lidDbMigrated", b"lidDbMigrated", "memClass", b"memClass", "oc", b"oc", "paddingBytes", b"paddingBytes", "passive", b"passive", "product", b"product", "pull", b"pull", "pushName", b"pushName", "sessionID", b"sessionID", "shortConnect", b"shortConnect", "trafficAnonymization", b"trafficAnonymization", "userAgent", b"userAgent", "username", b"username", "webInfo", b"webInfo", "yearClass", b"yearClass"]) -> bool: ...
    def ClearField(self, field_name: Literal["accountType", b"accountType", "connectAttemptCount", b"connectAttemptCount", "connectReason", b"connectReason", "connectType", b"connectType", "device", b"device", "devicePairingData", b"devicePairingData", "dnsSource", b"dnsSource", "fbAppID", b"fbAppID", "fbCat", b"fbCat", "fbDeviceID", b"fbDeviceID", "fbUserAgent", b"fbUserAgent", "interopData", b"interopData", "iosAppExtension", b"iosAppExtension", "lc", b"lc", "lidDbMigrated", b"lidDbMigrated", "memClass", b"memClass", "oc", b"oc", "paddingBytes", b"paddingBytes", "passive", b"passive", "product", b"product", "pull", b"pull", "pushName", b"pushName", "sessionID", b"sessionID", "shards", b"shards", "shortConnect", b"shortConnect", "trafficAnonymization", b"trafficAnonymization", "userAgent", b"userAgent", "username", b"username", "webInfo", b"webInfo", "yearClass", b"yearClass"]) -> None: ...

@final
class HandshakeMessage(Message):
    DESCRIPTOR: Descriptor

    @final
    class ClientFinish(Message):
        DESCRIPTOR: Descriptor

        STATIC_FIELD_NUMBER: int
        PAYLOAD_FIELD_NUMBER: int
        static: bytes
        payload: bytes
        def __init__(
            self,
            *,
            static: bytes | None = ...,
            payload: bytes | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["payload", b"payload", "static", b"static"]) -> bool: ...
        def ClearField(self, field_name: Literal["payload", b"payload", "static", b"static"]) -> None: ...

    @final
    class ServerHello(Message):
        DESCRIPTOR: Descriptor

        EPHEMERAL_FIELD_NUMBER: int
        STATIC_FIELD_NUMBER: int
        PAYLOAD_FIELD_NUMBER: int
        ephemeral: bytes
        static: bytes
        payload: bytes
        def __init__(
            self,
            *,
            ephemeral: bytes | None = ...,
            static: bytes | None = ...,
            payload: bytes | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["ephemeral", b"ephemeral", "payload", b"payload", "static", b"static"]) -> bool: ...
        def ClearField(self, field_name: Literal["ephemeral", b"ephemeral", "payload", b"payload", "static", b"static"]) -> None: ...

    @final
    class ClientHello(Message):
        DESCRIPTOR: Descriptor

        EPHEMERAL_FIELD_NUMBER: int
        STATIC_FIELD_NUMBER: int
        PAYLOAD_FIELD_NUMBER: int
        ephemeral: bytes
        static: bytes
        payload: bytes
        def __init__(
            self,
            *,
            ephemeral: bytes | None = ...,
            static: bytes | None = ...,
            payload: bytes | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["ephemeral", b"ephemeral", "payload", b"payload", "static", b"static"]) -> bool: ...
        def ClearField(self, field_name: Literal["ephemeral", b"ephemeral", "payload", b"payload", "static", b"static"]) -> None: ...

    CLIENTHELLO_FIELD_NUMBER: int
    SERVERHELLO_FIELD_NUMBER: int
    CLIENTFINISH_FIELD_NUMBER: int
    @property
    def clientHello(self) -> HandshakeMessage.ClientHello: ...
    @property
    def serverHello(self) -> HandshakeMessage.ServerHello: ...
    @property
    def clientFinish(self) -> HandshakeMessage.ClientFinish: ...
    def __init__(
        self,
        *,
        clientHello: HandshakeMessage.ClientHello | None = ...,
        serverHello: HandshakeMessage.ServerHello | None = ...,
        clientFinish: HandshakeMessage.ClientFinish | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["clientFinish", b"clientFinish", "clientHello", b"clientHello", "serverHello", b"serverHello"]) -> bool: ...
    def ClearField(self, field_name: Literal["clientFinish", b"clientFinish", "clientHello", b"clientHello", "serverHello", b"serverHello"]) -> None: ...
