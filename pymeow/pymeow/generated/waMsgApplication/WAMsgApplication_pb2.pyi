"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import sys

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
from builtins import (
    bool,
    bytes,
    int,
    str,
    type,
)
from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    Literal,
    NewType,
    final,
)
from ..waCommon.WACommon_pb2 import (
    FutureProofBehavior,
    SubProtocol,
)

DESCRIPTOR: FileDescriptor

@final
class MessageApplication(Message):
    DESCRIPTOR: Descriptor

    @final
    class Metadata(Message):
        DESCRIPTOR: Descriptor

        class _ThreadType:
            ValueType = NewType("ValueType", int)
            V: typing_extensions.TypeAlias = ValueType

        class _ThreadTypeEnumTypeWrapper(_EnumTypeWrapper[MessageApplication.Metadata._ThreadType.ValueType], type):
            DESCRIPTOR: EnumDescriptor
            DEFAULT: MessageApplication.Metadata._ThreadType.ValueType  # 0
            VANISH_MODE: MessageApplication.Metadata._ThreadType.ValueType  # 1
            DISAPPEARING_MESSAGES: MessageApplication.Metadata._ThreadType.ValueType  # 2

        class ThreadType(_ThreadType, metaclass=_ThreadTypeEnumTypeWrapper): ...
        DEFAULT: MessageApplication.Metadata.ThreadType.ValueType  # 0
        VANISH_MODE: MessageApplication.Metadata.ThreadType.ValueType  # 1
        DISAPPEARING_MESSAGES: MessageApplication.Metadata.ThreadType.ValueType  # 2

        @final
        class QuotedMessage(Message):
            DESCRIPTOR: Descriptor

            STANZAID_FIELD_NUMBER: int
            REMOTEJID_FIELD_NUMBER: int
            PARTICIPANT_FIELD_NUMBER: int
            PAYLOAD_FIELD_NUMBER: int
            stanzaID: str
            remoteJID: str
            participant: str
            @property
            def payload(self) -> MessageApplication.Payload: ...
            def __init__(
                self,
                *,
                stanzaID: str | None = ...,
                remoteJID: str | None = ...,
                participant: str | None = ...,
                payload: MessageApplication.Payload | None = ...,
            ) -> None: ...
            def HasField(self, field_name: Literal["participant", b"participant", "payload", b"payload", "remoteJID", b"remoteJID", "stanzaID", b"stanzaID"]) -> bool: ...
            def ClearField(self, field_name: Literal["participant", b"participant", "payload", b"payload", "remoteJID", b"remoteJID", "stanzaID", b"stanzaID"]) -> None: ...

        @final
        class EphemeralSettingMap(Message):
            DESCRIPTOR: Descriptor

            CHATJID_FIELD_NUMBER: int
            EPHEMERALSETTING_FIELD_NUMBER: int
            chatJID: str
            @property
            def ephemeralSetting(self) -> MessageApplication.EphemeralSetting: ...
            def __init__(
                self,
                *,
                chatJID: str | None = ...,
                ephemeralSetting: MessageApplication.EphemeralSetting | None = ...,
            ) -> None: ...
            def HasField(self, field_name: Literal["chatJID", b"chatJID", "ephemeralSetting", b"ephemeralSetting"]) -> bool: ...
            def ClearField(self, field_name: Literal["chatJID", b"chatJID", "ephemeralSetting", b"ephemeralSetting"]) -> None: ...

        CHATEPHEMERALSETTING_FIELD_NUMBER: int
        EPHEMERALSETTINGLIST_FIELD_NUMBER: int
        EPHEMERALSHAREDSECRET_FIELD_NUMBER: int
        FORWARDINGSCORE_FIELD_NUMBER: int
        ISFORWARDED_FIELD_NUMBER: int
        BUSINESSMETADATA_FIELD_NUMBER: int
        FRANKINGKEY_FIELD_NUMBER: int
        FRANKINGVERSION_FIELD_NUMBER: int
        QUOTEDMESSAGE_FIELD_NUMBER: int
        THREADTYPE_FIELD_NUMBER: int
        READONLYMETADATADATACLASS_FIELD_NUMBER: int
        GROUPID_FIELD_NUMBER: int
        GROUPSIZE_FIELD_NUMBER: int
        GROUPINDEX_FIELD_NUMBER: int
        BOTRESPONSEID_FIELD_NUMBER: int
        COLLAPSIBLEID_FIELD_NUMBER: int
        SECONDARYOTID_FIELD_NUMBER: int
        ephemeralSharedSecret: bytes
        forwardingScore: int
        isForwarded: bool
        frankingKey: bytes
        frankingVersion: int
        threadType: MessageApplication.Metadata.ThreadType.ValueType
        readonlyMetadataDataclass: str
        groupID: str
        groupSize: int
        groupIndex: int
        botResponseID: str
        collapsibleID: str
        secondaryOtid: str
        @property
        def chatEphemeralSetting(self) -> MessageApplication.EphemeralSetting: ...
        @property
        def ephemeralSettingList(self) -> MessageApplication.Metadata.EphemeralSettingMap: ...
        @property
        def businessMetadata(self) -> SubProtocol: ...
        @property
        def quotedMessage(self) -> MessageApplication.Metadata.QuotedMessage: ...
        def __init__(
            self,
            *,
            chatEphemeralSetting: MessageApplication.EphemeralSetting | None = ...,
            ephemeralSettingList: MessageApplication.Metadata.EphemeralSettingMap | None = ...,
            ephemeralSharedSecret: bytes | None = ...,
            forwardingScore: int | None = ...,
            isForwarded: bool | None = ...,
            businessMetadata: SubProtocol | None = ...,
            frankingKey: bytes | None = ...,
            frankingVersion: int | None = ...,
            quotedMessage: MessageApplication.Metadata.QuotedMessage | None = ...,
            threadType: MessageApplication.Metadata.ThreadType.ValueType | None = ...,
            readonlyMetadataDataclass: str | None = ...,
            groupID: str | None = ...,
            groupSize: int | None = ...,
            groupIndex: int | None = ...,
            botResponseID: str | None = ...,
            collapsibleID: str | None = ...,
            secondaryOtid: str | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["botResponseID", b"botResponseID", "businessMetadata", b"businessMetadata", "chatEphemeralSetting", b"chatEphemeralSetting", "collapsibleID", b"collapsibleID", "ephemeral", b"ephemeral", "ephemeralSettingList", b"ephemeralSettingList", "ephemeralSharedSecret", b"ephemeralSharedSecret", "forwardingScore", b"forwardingScore", "frankingKey", b"frankingKey", "frankingVersion", b"frankingVersion", "groupID", b"groupID", "groupIndex", b"groupIndex", "groupSize", b"groupSize", "isForwarded", b"isForwarded", "quotedMessage", b"quotedMessage", "readonlyMetadataDataclass", b"readonlyMetadataDataclass", "secondaryOtid", b"secondaryOtid", "threadType", b"threadType"]) -> bool: ...
        def ClearField(self, field_name: Literal["botResponseID", b"botResponseID", "businessMetadata", b"businessMetadata", "chatEphemeralSetting", b"chatEphemeralSetting", "collapsibleID", b"collapsibleID", "ephemeral", b"ephemeral", "ephemeralSettingList", b"ephemeralSettingList", "ephemeralSharedSecret", b"ephemeralSharedSecret", "forwardingScore", b"forwardingScore", "frankingKey", b"frankingKey", "frankingVersion", b"frankingVersion", "groupID", b"groupID", "groupIndex", b"groupIndex", "groupSize", b"groupSize", "isForwarded", b"isForwarded", "quotedMessage", b"quotedMessage", "readonlyMetadataDataclass", b"readonlyMetadataDataclass", "secondaryOtid", b"secondaryOtid", "threadType", b"threadType"]) -> None: ...
        def WhichOneof(self, oneof_group: Literal["ephemeral", b"ephemeral"]) -> Literal["chatEphemeralSetting", "ephemeralSettingList", "ephemeralSharedSecret"] | None: ...

    @final
    class Payload(Message):
        DESCRIPTOR: Descriptor

        CORECONTENT_FIELD_NUMBER: int
        SIGNAL_FIELD_NUMBER: int
        APPLICATIONDATA_FIELD_NUMBER: int
        SUBPROTOCOL_FIELD_NUMBER: int
        @property
        def coreContent(self) -> MessageApplication.Content: ...
        @property
        def signal(self) -> MessageApplication.Signal: ...
        @property
        def applicationData(self) -> MessageApplication.ApplicationData: ...
        @property
        def subProtocol(self) -> MessageApplication.SubProtocolPayload: ...
        def __init__(
            self,
            *,
            coreContent: MessageApplication.Content | None = ...,
            signal: MessageApplication.Signal | None = ...,
            applicationData: MessageApplication.ApplicationData | None = ...,
            subProtocol: MessageApplication.SubProtocolPayload | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["applicationData", b"applicationData", "content", b"content", "coreContent", b"coreContent", "signal", b"signal", "subProtocol", b"subProtocol"]) -> bool: ...
        def ClearField(self, field_name: Literal["applicationData", b"applicationData", "content", b"content", "coreContent", b"coreContent", "signal", b"signal", "subProtocol", b"subProtocol"]) -> None: ...
        def WhichOneof(self, oneof_group: Literal["content", b"content"]) -> Literal["coreContent", "signal", "applicationData", "subProtocol"] | None: ...

    @final
    class SubProtocolPayload(Message):
        DESCRIPTOR: Descriptor

        CONSUMERMESSAGE_FIELD_NUMBER: int
        BUSINESSMESSAGE_FIELD_NUMBER: int
        PAYMENTMESSAGE_FIELD_NUMBER: int
        MULTIDEVICE_FIELD_NUMBER: int
        VOIP_FIELD_NUMBER: int
        ARMADILLO_FIELD_NUMBER: int
        FUTUREPROOF_FIELD_NUMBER: int
        futureProof: FutureProofBehavior.ValueType
        @property
        def consumerMessage(self) -> SubProtocol: ...
        @property
        def businessMessage(self) -> SubProtocol: ...
        @property
        def paymentMessage(self) -> SubProtocol: ...
        @property
        def multiDevice(self) -> SubProtocol: ...
        @property
        def voip(self) -> SubProtocol: ...
        @property
        def armadillo(self) -> SubProtocol: ...
        def __init__(
            self,
            *,
            consumerMessage: SubProtocol | None = ...,
            businessMessage: SubProtocol | None = ...,
            paymentMessage: SubProtocol | None = ...,
            multiDevice: SubProtocol | None = ...,
            voip: SubProtocol | None = ...,
            armadillo: SubProtocol | None = ...,
            futureProof: FutureProofBehavior.ValueType | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["armadillo", b"armadillo", "businessMessage", b"businessMessage", "consumerMessage", b"consumerMessage", "futureProof", b"futureProof", "multiDevice", b"multiDevice", "paymentMessage", b"paymentMessage", "subProtocol", b"subProtocol", "voip", b"voip"]) -> bool: ...
        def ClearField(self, field_name: Literal["armadillo", b"armadillo", "businessMessage", b"businessMessage", "consumerMessage", b"consumerMessage", "futureProof", b"futureProof", "multiDevice", b"multiDevice", "paymentMessage", b"paymentMessage", "subProtocol", b"subProtocol", "voip", b"voip"]) -> None: ...
        def WhichOneof(self, oneof_group: Literal["subProtocol", b"subProtocol"]) -> Literal["consumerMessage", "businessMessage", "paymentMessage", "multiDevice", "voip", "armadillo"] | None: ...

    @final
    class ApplicationData(Message):
        DESCRIPTOR: Descriptor

        def __init__(
            self,
        ) -> None: ...

    @final
    class Signal(Message):
        DESCRIPTOR: Descriptor

        def __init__(
            self,
        ) -> None: ...

    @final
    class Content(Message):
        DESCRIPTOR: Descriptor

        def __init__(
            self,
        ) -> None: ...

    @final
    class EphemeralSetting(Message):
        DESCRIPTOR: Descriptor

        class _EphemeralityType:
            ValueType = NewType("ValueType", int)
            V: typing_extensions.TypeAlias = ValueType

        class _EphemeralityTypeEnumTypeWrapper(_EnumTypeWrapper[MessageApplication.EphemeralSetting._EphemeralityType.ValueType], type):
            DESCRIPTOR: EnumDescriptor
            UNKNOWN: MessageApplication.EphemeralSetting._EphemeralityType.ValueType  # 0
            SEEN_ONCE: MessageApplication.EphemeralSetting._EphemeralityType.ValueType  # 1
            SEEN_BASED_WITH_TIMER: MessageApplication.EphemeralSetting._EphemeralityType.ValueType  # 2
            SEND_BASED_WITH_TIMER: MessageApplication.EphemeralSetting._EphemeralityType.ValueType  # 3

        class EphemeralityType(_EphemeralityType, metaclass=_EphemeralityTypeEnumTypeWrapper): ...
        UNKNOWN: MessageApplication.EphemeralSetting.EphemeralityType.ValueType  # 0
        SEEN_ONCE: MessageApplication.EphemeralSetting.EphemeralityType.ValueType  # 1
        SEEN_BASED_WITH_TIMER: MessageApplication.EphemeralSetting.EphemeralityType.ValueType  # 2
        SEND_BASED_WITH_TIMER: MessageApplication.EphemeralSetting.EphemeralityType.ValueType  # 3

        EPHEMERALEXPIRATION_FIELD_NUMBER: int
        EPHEMERALSETTINGTIMESTAMP_FIELD_NUMBER: int
        EPHEMERALITYTYPE_FIELD_NUMBER: int
        ISEPHEMERALSETTINGRESET_FIELD_NUMBER: int
        ephemeralExpiration: int
        ephemeralSettingTimestamp: int
        ephemeralityType: MessageApplication.EphemeralSetting.EphemeralityType.ValueType
        isEphemeralSettingReset: bool
        def __init__(
            self,
            *,
            ephemeralExpiration: int | None = ...,
            ephemeralSettingTimestamp: int | None = ...,
            ephemeralityType: MessageApplication.EphemeralSetting.EphemeralityType.ValueType | None = ...,
            isEphemeralSettingReset: bool | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["ephemeralExpiration", b"ephemeralExpiration", "ephemeralSettingTimestamp", b"ephemeralSettingTimestamp", "ephemeralityType", b"ephemeralityType", "isEphemeralSettingReset", b"isEphemeralSettingReset"]) -> bool: ...
        def ClearField(self, field_name: Literal["ephemeralExpiration", b"ephemeralExpiration", "ephemeralSettingTimestamp", b"ephemeralSettingTimestamp", "ephemeralityType", b"ephemeralityType", "isEphemeralSettingReset", b"isEphemeralSettingReset"]) -> None: ...

    PAYLOAD_FIELD_NUMBER: int
    METADATA_FIELD_NUMBER: int
    @property
    def payload(self) -> MessageApplication.Payload: ...
    @property
    def metadata(self) -> MessageApplication.Metadata: ...
    def __init__(
        self,
        *,
        payload: MessageApplication.Payload | None = ...,
        metadata: MessageApplication.Metadata | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["metadata", b"metadata", "payload", b"payload"]) -> bool: ...
    def ClearField(self, field_name: Literal["metadata", b"metadata", "payload", b"payload"]) -> None: ...
