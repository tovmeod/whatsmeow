"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import sys

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
from builtins import (
    bool,
    bytes,
    int,
    str,
    type,
)
from collections.abc import (
    Iterable,
)
from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
    RepeatedScalarFieldContainer,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    Literal,
    NewType,
    final,
)
from ..waCommon.WACommon_pb2 import (
    FutureProofBehavior,
    SubProtocol,
)

DESCRIPTOR: FileDescriptor

@final
class MessageTransport(Message):
    DESCRIPTOR: Descriptor

    @final
    class Payload(Message):
        DESCRIPTOR: Descriptor

        APPLICATIONPAYLOAD_FIELD_NUMBER: int
        FUTUREPROOF_FIELD_NUMBER: int
        futureProof: FutureProofBehavior.ValueType
        @property
        def applicationPayload(self) -> SubProtocol: ...
        def __init__(
            self,
            *,
            applicationPayload: SubProtocol | None = ...,
            futureProof: FutureProofBehavior.ValueType | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["applicationPayload", b"applicationPayload", "futureProof", b"futureProof"]) -> bool: ...
        def ClearField(self, field_name: Literal["applicationPayload", b"applicationPayload", "futureProof", b"futureProof"]) -> None: ...

    @final
    class Protocol(Message):
        DESCRIPTOR: Descriptor

        @final
        class Ancillary(Message):
            DESCRIPTOR: Descriptor

            @final
            class BackupDirective(Message):
                DESCRIPTOR: Descriptor

                class _ActionType:
                    ValueType = NewType("ValueType", int)
                    V: typing_extensions.TypeAlias = ValueType

                class _ActionTypeEnumTypeWrapper(_EnumTypeWrapper[MessageTransport.Protocol.Ancillary.BackupDirective._ActionType.ValueType], type):
                    DESCRIPTOR: EnumDescriptor
                    NOOP: MessageTransport.Protocol.Ancillary.BackupDirective._ActionType.ValueType  # 0
                    UPSERT: MessageTransport.Protocol.Ancillary.BackupDirective._ActionType.ValueType  # 1
                    DELETE: MessageTransport.Protocol.Ancillary.BackupDirective._ActionType.ValueType  # 2
                    UPSERT_AND_DELETE: MessageTransport.Protocol.Ancillary.BackupDirective._ActionType.ValueType  # 3

                class ActionType(_ActionType, metaclass=_ActionTypeEnumTypeWrapper): ...
                NOOP: MessageTransport.Protocol.Ancillary.BackupDirective.ActionType.ValueType  # 0
                UPSERT: MessageTransport.Protocol.Ancillary.BackupDirective.ActionType.ValueType  # 1
                DELETE: MessageTransport.Protocol.Ancillary.BackupDirective.ActionType.ValueType  # 2
                UPSERT_AND_DELETE: MessageTransport.Protocol.Ancillary.BackupDirective.ActionType.ValueType  # 3

                MESSAGEID_FIELD_NUMBER: int
                ACTIONTYPE_FIELD_NUMBER: int
                SUPPLEMENTALKEY_FIELD_NUMBER: int
                messageID: str
                actionType: MessageTransport.Protocol.Ancillary.BackupDirective.ActionType.ValueType
                supplementalKey: str
                def __init__(
                    self,
                    *,
                    messageID: str | None = ...,
                    actionType: MessageTransport.Protocol.Ancillary.BackupDirective.ActionType.ValueType | None = ...,
                    supplementalKey: str | None = ...,
                ) -> None: ...
                def HasField(self, field_name: Literal["actionType", b"actionType", "messageID", b"messageID", "supplementalKey", b"supplementalKey"]) -> bool: ...
                def ClearField(self, field_name: Literal["actionType", b"actionType", "messageID", b"messageID", "supplementalKey", b"supplementalKey"]) -> None: ...

            @final
            class ICDCParticipantDevices(Message):
                DESCRIPTOR: Descriptor

                @final
                class ICDCIdentityListDescription(Message):
                    DESCRIPTOR: Descriptor

                    SEQ_FIELD_NUMBER: int
                    SIGNINGDEVICE_FIELD_NUMBER: int
                    UNKNOWNDEVICES_FIELD_NUMBER: int
                    UNKNOWNDEVICEIDS_FIELD_NUMBER: int
                    seq: int
                    signingDevice: bytes
                    @property
                    def unknownDevices(self) -> RepeatedScalarFieldContainer[bytes]: ...
                    @property
                    def unknownDeviceIDs(self) -> RepeatedScalarFieldContainer[int]: ...
                    def __init__(
                        self,
                        *,
                        seq: int | None = ...,
                        signingDevice: bytes | None = ...,
                        unknownDevices: Iterable[bytes] | None = ...,
                        unknownDeviceIDs: Iterable[int] | None = ...,
                    ) -> None: ...
                    def HasField(self, field_name: Literal["seq", b"seq", "signingDevice", b"signingDevice"]) -> bool: ...
                    def ClearField(self, field_name: Literal["seq", b"seq", "signingDevice", b"signingDevice", "unknownDeviceIDs", b"unknownDeviceIDs", "unknownDevices", b"unknownDevices"]) -> None: ...

                SENDERIDENTITY_FIELD_NUMBER: int
                RECIPIENTIDENTITIES_FIELD_NUMBER: int
                RECIPIENTUSERJIDS_FIELD_NUMBER: int
                @property
                def senderIdentity(self) -> MessageTransport.Protocol.Ancillary.ICDCParticipantDevices.ICDCIdentityListDescription: ...
                @property
                def recipientIdentities(self) -> RepeatedCompositeFieldContainer[MessageTransport.Protocol.Ancillary.ICDCParticipantDevices.ICDCIdentityListDescription]: ...
                @property
                def recipientUserJIDs(self) -> RepeatedScalarFieldContainer[str]: ...
                def __init__(
                    self,
                    *,
                    senderIdentity: MessageTransport.Protocol.Ancillary.ICDCParticipantDevices.ICDCIdentityListDescription | None = ...,
                    recipientIdentities: Iterable[MessageTransport.Protocol.Ancillary.ICDCParticipantDevices.ICDCIdentityListDescription] | None = ...,
                    recipientUserJIDs: Iterable[str] | None = ...,
                ) -> None: ...
                def HasField(self, field_name: Literal["senderIdentity", b"senderIdentity"]) -> bool: ...
                def ClearField(self, field_name: Literal["recipientIdentities", b"recipientIdentities", "recipientUserJIDs", b"recipientUserJIDs", "senderIdentity", b"senderIdentity"]) -> None: ...

            @final
            class SenderKeyDistributionMessage(Message):
                DESCRIPTOR: Descriptor

                GROUPID_FIELD_NUMBER: int
                AXOLOTLSENDERKEYDISTRIBUTIONMESSAGE_FIELD_NUMBER: int
                groupID: str
                axolotlSenderKeyDistributionMessage: bytes
                def __init__(
                    self,
                    *,
                    groupID: str | None = ...,
                    axolotlSenderKeyDistributionMessage: bytes | None = ...,
                ) -> None: ...
                def HasField(self, field_name: Literal["axolotlSenderKeyDistributionMessage", b"axolotlSenderKeyDistributionMessage", "groupID", b"groupID"]) -> bool: ...
                def ClearField(self, field_name: Literal["axolotlSenderKeyDistributionMessage", b"axolotlSenderKeyDistributionMessage", "groupID", b"groupID"]) -> None: ...

            SKDM_FIELD_NUMBER: int
            DEVICELISTMETADATA_FIELD_NUMBER: int
            ICDC_FIELD_NUMBER: int
            BACKUPDIRECTIVE_FIELD_NUMBER: int
            @property
            def skdm(self) -> MessageTransport.Protocol.Ancillary.SenderKeyDistributionMessage: ...
            @property
            def deviceListMetadata(self) -> DeviceListMetadata: ...
            @property
            def icdc(self) -> MessageTransport.Protocol.Ancillary.ICDCParticipantDevices: ...
            @property
            def backupDirective(self) -> MessageTransport.Protocol.Ancillary.BackupDirective: ...
            def __init__(
                self,
                *,
                skdm: MessageTransport.Protocol.Ancillary.SenderKeyDistributionMessage | None = ...,
                deviceListMetadata: DeviceListMetadata | None = ...,
                icdc: MessageTransport.Protocol.Ancillary.ICDCParticipantDevices | None = ...,
                backupDirective: MessageTransport.Protocol.Ancillary.BackupDirective | None = ...,
            ) -> None: ...
            def HasField(self, field_name: Literal["backupDirective", b"backupDirective", "deviceListMetadata", b"deviceListMetadata", "icdc", b"icdc", "skdm", b"skdm"]) -> bool: ...
            def ClearField(self, field_name: Literal["backupDirective", b"backupDirective", "deviceListMetadata", b"deviceListMetadata", "icdc", b"icdc", "skdm", b"skdm"]) -> None: ...

        @final
        class Integral(Message):
            DESCRIPTOR: Descriptor

            @final
            class DeviceSentMessage(Message):
                DESCRIPTOR: Descriptor

                DESTINATIONJID_FIELD_NUMBER: int
                PHASH_FIELD_NUMBER: int
                destinationJID: str
                phash: str
                def __init__(
                    self,
                    *,
                    destinationJID: str | None = ...,
                    phash: str | None = ...,
                ) -> None: ...
                def HasField(self, field_name: Literal["destinationJID", b"destinationJID", "phash", b"phash"]) -> bool: ...
                def ClearField(self, field_name: Literal["destinationJID", b"destinationJID", "phash", b"phash"]) -> None: ...

            PADDING_FIELD_NUMBER: int
            DSM_FIELD_NUMBER: int
            padding: bytes
            @property
            def DSM(self) -> MessageTransport.Protocol.Integral.DeviceSentMessage: ...
            def __init__(
                self,
                *,
                padding: bytes | None = ...,
                DSM: MessageTransport.Protocol.Integral.DeviceSentMessage | None = ...,
            ) -> None: ...
            def HasField(self, field_name: Literal["DSM", b"DSM", "padding", b"padding"]) -> bool: ...
            def ClearField(self, field_name: Literal["DSM", b"DSM", "padding", b"padding"]) -> None: ...

        INTEGRAL_FIELD_NUMBER: int
        ANCILLARY_FIELD_NUMBER: int
        @property
        def integral(self) -> MessageTransport.Protocol.Integral: ...
        @property
        def ancillary(self) -> MessageTransport.Protocol.Ancillary: ...
        def __init__(
            self,
            *,
            integral: MessageTransport.Protocol.Integral | None = ...,
            ancillary: MessageTransport.Protocol.Ancillary | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["ancillary", b"ancillary", "integral", b"integral"]) -> bool: ...
        def ClearField(self, field_name: Literal["ancillary", b"ancillary", "integral", b"integral"]) -> None: ...

    PAYLOAD_FIELD_NUMBER: int
    PROTOCOL_FIELD_NUMBER: int
    @property
    def payload(self) -> MessageTransport.Payload: ...
    @property
    def protocol(self) -> MessageTransport.Protocol: ...
    def __init__(
        self,
        *,
        payload: MessageTransport.Payload | None = ...,
        protocol: MessageTransport.Protocol | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["payload", b"payload", "protocol", b"protocol"]) -> bool: ...
    def ClearField(self, field_name: Literal["payload", b"payload", "protocol", b"protocol"]) -> None: ...

@final
class DeviceListMetadata(Message):
    DESCRIPTOR: Descriptor

    SENDERKEYHASH_FIELD_NUMBER: int
    SENDERTIMESTAMP_FIELD_NUMBER: int
    RECIPIENTKEYHASH_FIELD_NUMBER: int
    RECIPIENTTIMESTAMP_FIELD_NUMBER: int
    senderKeyHash: bytes
    senderTimestamp: int
    recipientKeyHash: bytes
    recipientTimestamp: int
    def __init__(
        self,
        *,
        senderKeyHash: bytes | None = ...,
        senderTimestamp: int | None = ...,
        recipientKeyHash: bytes | None = ...,
        recipientTimestamp: int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["recipientKeyHash", b"recipientKeyHash", "recipientTimestamp", b"recipientTimestamp", "senderKeyHash", b"senderKeyHash", "senderTimestamp", b"senderTimestamp"]) -> bool: ...
    def ClearField(self, field_name: Literal["recipientKeyHash", b"recipientKeyHash", "recipientTimestamp", b"recipientTimestamp", "senderKeyHash", b"senderKeyHash", "senderTimestamp", b"senderTimestamp"]) -> None: ...
