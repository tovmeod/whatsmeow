"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import sys

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
from builtins import (
    bool,
    bytes,
    float,
    int,
    str,
    type,
)
from collections.abc import (
    Iterable,
)
from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
    RepeatedScalarFieldContainer,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    Literal,
    NewType,
    final,
)
from ..waCommon.WACommon_pb2 import (
    FutureProofBehavior,
    MessageKey,
    MessageText,
    SubProtocol,
)

DESCRIPTOR: FileDescriptor

@final
class ConsumerApplication(Message):
    DESCRIPTOR: Descriptor

    @final
    class Payload(Message):
        DESCRIPTOR: Descriptor

        CONTENT_FIELD_NUMBER: int
        APPLICATIONDATA_FIELD_NUMBER: int
        SIGNAL_FIELD_NUMBER: int
        SUBPROTOCOL_FIELD_NUMBER: int
        @property
        def content(self) -> ConsumerApplication.Content: ...
        @property
        def applicationData(self) -> ConsumerApplication.ApplicationData: ...
        @property
        def signal(self) -> ConsumerApplication.Signal: ...
        @property
        def subProtocol(self) -> ConsumerApplication.SubProtocolPayload: ...
        def __init__(
            self,
            *,
            content: ConsumerApplication.Content | None = ...,
            applicationData: ConsumerApplication.ApplicationData | None = ...,
            signal: ConsumerApplication.Signal | None = ...,
            subProtocol: ConsumerApplication.SubProtocolPayload | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["applicationData", b"applicationData", "content", b"content", "payload", b"payload", "signal", b"signal", "subProtocol", b"subProtocol"]) -> bool: ...
        def ClearField(self, field_name: Literal["applicationData", b"applicationData", "content", b"content", "payload", b"payload", "signal", b"signal", "subProtocol", b"subProtocol"]) -> None: ...
        def WhichOneof(self, oneof_group: Literal["payload", b"payload"]) -> Literal["content", "applicationData", "signal", "subProtocol"] | None: ...

    @final
    class SubProtocolPayload(Message):
        DESCRIPTOR: Descriptor

        FUTUREPROOF_FIELD_NUMBER: int
        futureProof: FutureProofBehavior.ValueType
        def __init__(
            self,
            *,
            futureProof: FutureProofBehavior.ValueType | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["futureProof", b"futureProof"]) -> bool: ...
        def ClearField(self, field_name: Literal["futureProof", b"futureProof"]) -> None: ...

    @final
    class Metadata(Message):
        DESCRIPTOR: Descriptor

        class _SpecialTextSize:
            ValueType = NewType("ValueType", int)
            V: typing_extensions.TypeAlias = ValueType

        class _SpecialTextSizeEnumTypeWrapper(_EnumTypeWrapper[ConsumerApplication.Metadata._SpecialTextSize.ValueType], type):
            DESCRIPTOR: EnumDescriptor
            SMALL: ConsumerApplication.Metadata._SpecialTextSize.ValueType  # 1
            MEDIUM: ConsumerApplication.Metadata._SpecialTextSize.ValueType  # 2
            LARGE: ConsumerApplication.Metadata._SpecialTextSize.ValueType  # 3

        class SpecialTextSize(_SpecialTextSize, metaclass=_SpecialTextSizeEnumTypeWrapper): ...
        SMALL: ConsumerApplication.Metadata.SpecialTextSize.ValueType  # 1
        MEDIUM: ConsumerApplication.Metadata.SpecialTextSize.ValueType  # 2
        LARGE: ConsumerApplication.Metadata.SpecialTextSize.ValueType  # 3

        SPECIALTEXTSIZE_FIELD_NUMBER: int
        specialTextSize: ConsumerApplication.Metadata.SpecialTextSize.ValueType
        def __init__(
            self,
            *,
            specialTextSize: ConsumerApplication.Metadata.SpecialTextSize.ValueType | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["specialTextSize", b"specialTextSize"]) -> bool: ...
        def ClearField(self, field_name: Literal["specialTextSize", b"specialTextSize"]) -> None: ...

    @final
    class Signal(Message):
        DESCRIPTOR: Descriptor

        def __init__(
            self,
        ) -> None: ...

    @final
    class ApplicationData(Message):
        DESCRIPTOR: Descriptor

        REVOKE_FIELD_NUMBER: int
        @property
        def revoke(self) -> ConsumerApplication.RevokeMessage: ...
        def __init__(
            self,
            *,
            revoke: ConsumerApplication.RevokeMessage | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["applicationContent", b"applicationContent", "revoke", b"revoke"]) -> bool: ...
        def ClearField(self, field_name: Literal["applicationContent", b"applicationContent", "revoke", b"revoke"]) -> None: ...
        def WhichOneof(self, oneof_group: Literal["applicationContent", b"applicationContent"]) -> Literal["revoke"] | None: ...

    @final
    class Content(Message):
        DESCRIPTOR: Descriptor

        MESSAGETEXT_FIELD_NUMBER: int
        IMAGEMESSAGE_FIELD_NUMBER: int
        CONTACTMESSAGE_FIELD_NUMBER: int
        LOCATIONMESSAGE_FIELD_NUMBER: int
        EXTENDEDTEXTMESSAGE_FIELD_NUMBER: int
        STATUSTEXTMESSAGE_FIELD_NUMBER: int
        DOCUMENTMESSAGE_FIELD_NUMBER: int
        AUDIOMESSAGE_FIELD_NUMBER: int
        VIDEOMESSAGE_FIELD_NUMBER: int
        CONTACTSARRAYMESSAGE_FIELD_NUMBER: int
        LIVELOCATIONMESSAGE_FIELD_NUMBER: int
        STICKERMESSAGE_FIELD_NUMBER: int
        GROUPINVITEMESSAGE_FIELD_NUMBER: int
        VIEWONCEMESSAGE_FIELD_NUMBER: int
        REACTIONMESSAGE_FIELD_NUMBER: int
        POLLCREATIONMESSAGE_FIELD_NUMBER: int
        POLLUPDATEMESSAGE_FIELD_NUMBER: int
        EDITMESSAGE_FIELD_NUMBER: int
        @property
        def messageText(self) -> MessageText: ...
        @property
        def imageMessage(self) -> ConsumerApplication.ImageMessage: ...
        @property
        def contactMessage(self) -> ConsumerApplication.ContactMessage: ...
        @property
        def locationMessage(self) -> ConsumerApplication.LocationMessage: ...
        @property
        def extendedTextMessage(self) -> ConsumerApplication.ExtendedTextMessage: ...
        @property
        def statusTextMessage(self) -> ConsumerApplication.StatusTextMesage: ...
        @property
        def documentMessage(self) -> ConsumerApplication.DocumentMessage: ...
        @property
        def audioMessage(self) -> ConsumerApplication.AudioMessage: ...
        @property
        def videoMessage(self) -> ConsumerApplication.VideoMessage: ...
        @property
        def contactsArrayMessage(self) -> ConsumerApplication.ContactsArrayMessage: ...
        @property
        def liveLocationMessage(self) -> ConsumerApplication.LiveLocationMessage: ...
        @property
        def stickerMessage(self) -> ConsumerApplication.StickerMessage: ...
        @property
        def groupInviteMessage(self) -> ConsumerApplication.GroupInviteMessage: ...
        @property
        def viewOnceMessage(self) -> ConsumerApplication.ViewOnceMessage: ...
        @property
        def reactionMessage(self) -> ConsumerApplication.ReactionMessage: ...
        @property
        def pollCreationMessage(self) -> ConsumerApplication.PollCreationMessage: ...
        @property
        def pollUpdateMessage(self) -> ConsumerApplication.PollUpdateMessage: ...
        @property
        def editMessage(self) -> ConsumerApplication.EditMessage: ...
        def __init__(
            self,
            *,
            messageText: MessageText | None = ...,
            imageMessage: ConsumerApplication.ImageMessage | None = ...,
            contactMessage: ConsumerApplication.ContactMessage | None = ...,
            locationMessage: ConsumerApplication.LocationMessage | None = ...,
            extendedTextMessage: ConsumerApplication.ExtendedTextMessage | None = ...,
            statusTextMessage: ConsumerApplication.StatusTextMesage | None = ...,
            documentMessage: ConsumerApplication.DocumentMessage | None = ...,
            audioMessage: ConsumerApplication.AudioMessage | None = ...,
            videoMessage: ConsumerApplication.VideoMessage | None = ...,
            contactsArrayMessage: ConsumerApplication.ContactsArrayMessage | None = ...,
            liveLocationMessage: ConsumerApplication.LiveLocationMessage | None = ...,
            stickerMessage: ConsumerApplication.StickerMessage | None = ...,
            groupInviteMessage: ConsumerApplication.GroupInviteMessage | None = ...,
            viewOnceMessage: ConsumerApplication.ViewOnceMessage | None = ...,
            reactionMessage: ConsumerApplication.ReactionMessage | None = ...,
            pollCreationMessage: ConsumerApplication.PollCreationMessage | None = ...,
            pollUpdateMessage: ConsumerApplication.PollUpdateMessage | None = ...,
            editMessage: ConsumerApplication.EditMessage | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["audioMessage", b"audioMessage", "contactMessage", b"contactMessage", "contactsArrayMessage", b"contactsArrayMessage", "content", b"content", "documentMessage", b"documentMessage", "editMessage", b"editMessage", "extendedTextMessage", b"extendedTextMessage", "groupInviteMessage", b"groupInviteMessage", "imageMessage", b"imageMessage", "liveLocationMessage", b"liveLocationMessage", "locationMessage", b"locationMessage", "messageText", b"messageText", "pollCreationMessage", b"pollCreationMessage", "pollUpdateMessage", b"pollUpdateMessage", "reactionMessage", b"reactionMessage", "statusTextMessage", b"statusTextMessage", "stickerMessage", b"stickerMessage", "videoMessage", b"videoMessage", "viewOnceMessage", b"viewOnceMessage"]) -> bool: ...
        def ClearField(self, field_name: Literal["audioMessage", b"audioMessage", "contactMessage", b"contactMessage", "contactsArrayMessage", b"contactsArrayMessage", "content", b"content", "documentMessage", b"documentMessage", "editMessage", b"editMessage", "extendedTextMessage", b"extendedTextMessage", "groupInviteMessage", b"groupInviteMessage", "imageMessage", b"imageMessage", "liveLocationMessage", b"liveLocationMessage", "locationMessage", b"locationMessage", "messageText", b"messageText", "pollCreationMessage", b"pollCreationMessage", "pollUpdateMessage", b"pollUpdateMessage", "reactionMessage", b"reactionMessage", "statusTextMessage", b"statusTextMessage", "stickerMessage", b"stickerMessage", "videoMessage", b"videoMessage", "viewOnceMessage", b"viewOnceMessage"]) -> None: ...
        def WhichOneof(self, oneof_group: Literal["content", b"content"]) -> Literal["messageText", "imageMessage", "contactMessage", "locationMessage", "extendedTextMessage", "statusTextMessage", "documentMessage", "audioMessage", "videoMessage", "contactsArrayMessage", "liveLocationMessage", "stickerMessage", "groupInviteMessage", "viewOnceMessage", "reactionMessage", "pollCreationMessage", "pollUpdateMessage", "editMessage"] | None: ...

    @final
    class EditMessage(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        MESSAGE_FIELD_NUMBER: int
        TIMESTAMPMS_FIELD_NUMBER: int
        timestampMS: int
        @property
        def key(self) -> MessageKey: ...
        @property
        def message(self) -> MessageText: ...
        def __init__(
            self,
            *,
            key: MessageKey | None = ...,
            message: MessageText | None = ...,
            timestampMS: int | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["key", b"key", "message", b"message", "timestampMS", b"timestampMS"]) -> bool: ...
        def ClearField(self, field_name: Literal["key", b"key", "message", b"message", "timestampMS", b"timestampMS"]) -> None: ...

    @final
    class PollAddOptionMessage(Message):
        DESCRIPTOR: Descriptor

        POLLOPTION_FIELD_NUMBER: int
        @property
        def pollOption(self) -> RepeatedCompositeFieldContainer[ConsumerApplication.Option]: ...
        def __init__(
            self,
            *,
            pollOption: Iterable[ConsumerApplication.Option] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: Literal["pollOption", b"pollOption"]) -> None: ...

    @final
    class PollVoteMessage(Message):
        DESCRIPTOR: Descriptor

        SELECTEDOPTIONS_FIELD_NUMBER: int
        SENDERTIMESTAMPMS_FIELD_NUMBER: int
        senderTimestampMS: int
        @property
        def selectedOptions(self) -> RepeatedScalarFieldContainer[bytes]: ...
        def __init__(
            self,
            *,
            selectedOptions: Iterable[bytes] | None = ...,
            senderTimestampMS: int | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["senderTimestampMS", b"senderTimestampMS"]) -> bool: ...
        def ClearField(self, field_name: Literal["selectedOptions", b"selectedOptions", "senderTimestampMS", b"senderTimestampMS"]) -> None: ...

    @final
    class PollEncValue(Message):
        DESCRIPTOR: Descriptor

        ENCPAYLOAD_FIELD_NUMBER: int
        ENCIV_FIELD_NUMBER: int
        encPayload: bytes
        encIV: bytes
        def __init__(
            self,
            *,
            encPayload: bytes | None = ...,
            encIV: bytes | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["encIV", b"encIV", "encPayload", b"encPayload"]) -> bool: ...
        def ClearField(self, field_name: Literal["encIV", b"encIV", "encPayload", b"encPayload"]) -> None: ...

    @final
    class PollUpdateMessage(Message):
        DESCRIPTOR: Descriptor

        POLLCREATIONMESSAGEKEY_FIELD_NUMBER: int
        VOTE_FIELD_NUMBER: int
        ADDOPTION_FIELD_NUMBER: int
        @property
        def pollCreationMessageKey(self) -> MessageKey: ...
        @property
        def vote(self) -> ConsumerApplication.PollEncValue: ...
        @property
        def addOption(self) -> ConsumerApplication.PollEncValue: ...
        def __init__(
            self,
            *,
            pollCreationMessageKey: MessageKey | None = ...,
            vote: ConsumerApplication.PollEncValue | None = ...,
            addOption: ConsumerApplication.PollEncValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["addOption", b"addOption", "pollCreationMessageKey", b"pollCreationMessageKey", "vote", b"vote"]) -> bool: ...
        def ClearField(self, field_name: Literal["addOption", b"addOption", "pollCreationMessageKey", b"pollCreationMessageKey", "vote", b"vote"]) -> None: ...

    @final
    class PollCreationMessage(Message):
        DESCRIPTOR: Descriptor

        ENCKEY_FIELD_NUMBER: int
        NAME_FIELD_NUMBER: int
        OPTIONS_FIELD_NUMBER: int
        SELECTABLEOPTIONSCOUNT_FIELD_NUMBER: int
        encKey: bytes
        name: str
        selectableOptionsCount: int
        @property
        def options(self) -> RepeatedCompositeFieldContainer[ConsumerApplication.Option]: ...
        def __init__(
            self,
            *,
            encKey: bytes | None = ...,
            name: str | None = ...,
            options: Iterable[ConsumerApplication.Option] | None = ...,
            selectableOptionsCount: int | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["encKey", b"encKey", "name", b"name", "selectableOptionsCount", b"selectableOptionsCount"]) -> bool: ...
        def ClearField(self, field_name: Literal["encKey", b"encKey", "name", b"name", "options", b"options", "selectableOptionsCount", b"selectableOptionsCount"]) -> None: ...

    @final
    class Option(Message):
        DESCRIPTOR: Descriptor

        OPTIONNAME_FIELD_NUMBER: int
        optionName: str
        def __init__(
            self,
            *,
            optionName: str | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["optionName", b"optionName"]) -> bool: ...
        def ClearField(self, field_name: Literal["optionName", b"optionName"]) -> None: ...

    @final
    class ReactionMessage(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        TEXT_FIELD_NUMBER: int
        GROUPINGKEY_FIELD_NUMBER: int
        SENDERTIMESTAMPMS_FIELD_NUMBER: int
        REACTIONMETADATADATACLASSDATA_FIELD_NUMBER: int
        STYLE_FIELD_NUMBER: int
        text: str
        groupingKey: str
        senderTimestampMS: int
        reactionMetadataDataclassData: str
        style: int
        @property
        def key(self) -> MessageKey: ...
        def __init__(
            self,
            *,
            key: MessageKey | None = ...,
            text: str | None = ...,
            groupingKey: str | None = ...,
            senderTimestampMS: int | None = ...,
            reactionMetadataDataclassData: str | None = ...,
            style: int | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["groupingKey", b"groupingKey", "key", b"key", "reactionMetadataDataclassData", b"reactionMetadataDataclassData", "senderTimestampMS", b"senderTimestampMS", "style", b"style", "text", b"text"]) -> bool: ...
        def ClearField(self, field_name: Literal["groupingKey", b"groupingKey", "key", b"key", "reactionMetadataDataclassData", b"reactionMetadataDataclassData", "senderTimestampMS", b"senderTimestampMS", "style", b"style", "text", b"text"]) -> None: ...

    @final
    class RevokeMessage(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        @property
        def key(self) -> MessageKey: ...
        def __init__(
            self,
            *,
            key: MessageKey | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["key", b"key"]) -> bool: ...
        def ClearField(self, field_name: Literal["key", b"key"]) -> None: ...

    @final
    class ViewOnceMessage(Message):
        DESCRIPTOR: Descriptor

        IMAGEMESSAGE_FIELD_NUMBER: int
        VIDEOMESSAGE_FIELD_NUMBER: int
        @property
        def imageMessage(self) -> ConsumerApplication.ImageMessage: ...
        @property
        def videoMessage(self) -> ConsumerApplication.VideoMessage: ...
        def __init__(
            self,
            *,
            imageMessage: ConsumerApplication.ImageMessage | None = ...,
            videoMessage: ConsumerApplication.VideoMessage | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["imageMessage", b"imageMessage", "videoMessage", b"videoMessage", "viewOnceContent", b"viewOnceContent"]) -> bool: ...
        def ClearField(self, field_name: Literal["imageMessage", b"imageMessage", "videoMessage", b"videoMessage", "viewOnceContent", b"viewOnceContent"]) -> None: ...
        def WhichOneof(self, oneof_group: Literal["viewOnceContent", b"viewOnceContent"]) -> Literal["imageMessage", "videoMessage"] | None: ...

    @final
    class GroupInviteMessage(Message):
        DESCRIPTOR: Descriptor

        GROUPJID_FIELD_NUMBER: int
        INVITECODE_FIELD_NUMBER: int
        INVITEEXPIRATION_FIELD_NUMBER: int
        GROUPNAME_FIELD_NUMBER: int
        JPEGTHUMBNAIL_FIELD_NUMBER: int
        CAPTION_FIELD_NUMBER: int
        groupJID: str
        inviteCode: str
        inviteExpiration: int
        groupName: str
        JPEGThumbnail: bytes
        @property
        def caption(self) -> MessageText: ...
        def __init__(
            self,
            *,
            groupJID: str | None = ...,
            inviteCode: str | None = ...,
            inviteExpiration: int | None = ...,
            groupName: str | None = ...,
            JPEGThumbnail: bytes | None = ...,
            caption: MessageText | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["JPEGThumbnail", b"JPEGThumbnail", "caption", b"caption", "groupJID", b"groupJID", "groupName", b"groupName", "inviteCode", b"inviteCode", "inviteExpiration", b"inviteExpiration"]) -> bool: ...
        def ClearField(self, field_name: Literal["JPEGThumbnail", b"JPEGThumbnail", "caption", b"caption", "groupJID", b"groupJID", "groupName", b"groupName", "inviteCode", b"inviteCode", "inviteExpiration", b"inviteExpiration"]) -> None: ...

    @final
    class LiveLocationMessage(Message):
        DESCRIPTOR: Descriptor

        LOCATION_FIELD_NUMBER: int
        ACCURACYINMETERS_FIELD_NUMBER: int
        SPEEDINMPS_FIELD_NUMBER: int
        DEGREESCLOCKWISEFROMMAGNETICNORTH_FIELD_NUMBER: int
        CAPTION_FIELD_NUMBER: int
        SEQUENCENUMBER_FIELD_NUMBER: int
        TIMEOFFSET_FIELD_NUMBER: int
        accuracyInMeters: int
        speedInMps: float
        degreesClockwiseFromMagneticNorth: int
        sequenceNumber: int
        timeOffset: int
        @property
        def location(self) -> ConsumerApplication.Location: ...
        @property
        def caption(self) -> MessageText: ...
        def __init__(
            self,
            *,
            location: ConsumerApplication.Location | None = ...,
            accuracyInMeters: int | None = ...,
            speedInMps: float | None = ...,
            degreesClockwiseFromMagneticNorth: int | None = ...,
            caption: MessageText | None = ...,
            sequenceNumber: int | None = ...,
            timeOffset: int | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["accuracyInMeters", b"accuracyInMeters", "caption", b"caption", "degreesClockwiseFromMagneticNorth", b"degreesClockwiseFromMagneticNorth", "location", b"location", "sequenceNumber", b"sequenceNumber", "speedInMps", b"speedInMps", "timeOffset", b"timeOffset"]) -> bool: ...
        def ClearField(self, field_name: Literal["accuracyInMeters", b"accuracyInMeters", "caption", b"caption", "degreesClockwiseFromMagneticNorth", b"degreesClockwiseFromMagneticNorth", "location", b"location", "sequenceNumber", b"sequenceNumber", "speedInMps", b"speedInMps", "timeOffset", b"timeOffset"]) -> None: ...

    @final
    class ContactsArrayMessage(Message):
        DESCRIPTOR: Descriptor

        DISPLAYNAME_FIELD_NUMBER: int
        CONTACTS_FIELD_NUMBER: int
        displayName: str
        @property
        def contacts(self) -> RepeatedCompositeFieldContainer[ConsumerApplication.ContactMessage]: ...
        def __init__(
            self,
            *,
            displayName: str | None = ...,
            contacts: Iterable[ConsumerApplication.ContactMessage] | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["displayName", b"displayName"]) -> bool: ...
        def ClearField(self, field_name: Literal["contacts", b"contacts", "displayName", b"displayName"]) -> None: ...

    @final
    class ContactMessage(Message):
        DESCRIPTOR: Descriptor

        CONTACT_FIELD_NUMBER: int
        @property
        def contact(self) -> SubProtocol: ...
        def __init__(
            self,
            *,
            contact: SubProtocol | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["contact", b"contact"]) -> bool: ...
        def ClearField(self, field_name: Literal["contact", b"contact"]) -> None: ...

    @final
    class StatusTextMesage(Message):
        DESCRIPTOR: Descriptor

        class _FontType:
            ValueType = NewType("ValueType", int)
            V: typing_extensions.TypeAlias = ValueType

        class _FontTypeEnumTypeWrapper(_EnumTypeWrapper[ConsumerApplication.StatusTextMesage._FontType.ValueType], type):
            DESCRIPTOR: EnumDescriptor
            SANS_SERIF: ConsumerApplication.StatusTextMesage._FontType.ValueType  # 0
            SERIF: ConsumerApplication.StatusTextMesage._FontType.ValueType  # 1
            NORICAN_REGULAR: ConsumerApplication.StatusTextMesage._FontType.ValueType  # 2
            BRYNDAN_WRITE: ConsumerApplication.StatusTextMesage._FontType.ValueType  # 3
            BEBASNEUE_REGULAR: ConsumerApplication.StatusTextMesage._FontType.ValueType  # 4
            OSWALD_HEAVY: ConsumerApplication.StatusTextMesage._FontType.ValueType  # 5

        class FontType(_FontType, metaclass=_FontTypeEnumTypeWrapper): ...
        SANS_SERIF: ConsumerApplication.StatusTextMesage.FontType.ValueType  # 0
        SERIF: ConsumerApplication.StatusTextMesage.FontType.ValueType  # 1
        NORICAN_REGULAR: ConsumerApplication.StatusTextMesage.FontType.ValueType  # 2
        BRYNDAN_WRITE: ConsumerApplication.StatusTextMesage.FontType.ValueType  # 3
        BEBASNEUE_REGULAR: ConsumerApplication.StatusTextMesage.FontType.ValueType  # 4
        OSWALD_HEAVY: ConsumerApplication.StatusTextMesage.FontType.ValueType  # 5

        TEXT_FIELD_NUMBER: int
        TEXTARGB_FIELD_NUMBER: int
        BACKGROUNDARGB_FIELD_NUMBER: int
        FONT_FIELD_NUMBER: int
        textArgb: int
        backgroundArgb: int
        font: ConsumerApplication.StatusTextMesage.FontType.ValueType
        @property
        def text(self) -> ConsumerApplication.ExtendedTextMessage: ...
        def __init__(
            self,
            *,
            text: ConsumerApplication.ExtendedTextMessage | None = ...,
            textArgb: int | None = ...,
            backgroundArgb: int | None = ...,
            font: ConsumerApplication.StatusTextMesage.FontType.ValueType | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["backgroundArgb", b"backgroundArgb", "font", b"font", "text", b"text", "textArgb", b"textArgb"]) -> bool: ...
        def ClearField(self, field_name: Literal["backgroundArgb", b"backgroundArgb", "font", b"font", "text", b"text", "textArgb", b"textArgb"]) -> None: ...

    @final
    class ExtendedTextMessage(Message):
        DESCRIPTOR: Descriptor

        class _PreviewType:
            ValueType = NewType("ValueType", int)
            V: typing_extensions.TypeAlias = ValueType

        class _PreviewTypeEnumTypeWrapper(_EnumTypeWrapper[ConsumerApplication.ExtendedTextMessage._PreviewType.ValueType], type):
            DESCRIPTOR: EnumDescriptor
            NONE: ConsumerApplication.ExtendedTextMessage._PreviewType.ValueType  # 0
            VIDEO: ConsumerApplication.ExtendedTextMessage._PreviewType.ValueType  # 1

        class PreviewType(_PreviewType, metaclass=_PreviewTypeEnumTypeWrapper): ...
        NONE: ConsumerApplication.ExtendedTextMessage.PreviewType.ValueType  # 0
        VIDEO: ConsumerApplication.ExtendedTextMessage.PreviewType.ValueType  # 1

        TEXT_FIELD_NUMBER: int
        MATCHEDTEXT_FIELD_NUMBER: int
        CANONICALURL_FIELD_NUMBER: int
        DESCRIPTION_FIELD_NUMBER: int
        TITLE_FIELD_NUMBER: int
        THUMBNAIL_FIELD_NUMBER: int
        PREVIEWTYPE_FIELD_NUMBER: int
        matchedText: str
        canonicalURL: str
        description: str
        title: str
        previewType: ConsumerApplication.ExtendedTextMessage.PreviewType.ValueType
        @property
        def text(self) -> MessageText: ...
        @property
        def thumbnail(self) -> SubProtocol: ...
        def __init__(
            self,
            *,
            text: MessageText | None = ...,
            matchedText: str | None = ...,
            canonicalURL: str | None = ...,
            description: str | None = ...,
            title: str | None = ...,
            thumbnail: SubProtocol | None = ...,
            previewType: ConsumerApplication.ExtendedTextMessage.PreviewType.ValueType | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["canonicalURL", b"canonicalURL", "description", b"description", "matchedText", b"matchedText", "previewType", b"previewType", "text", b"text", "thumbnail", b"thumbnail", "title", b"title"]) -> bool: ...
        def ClearField(self, field_name: Literal["canonicalURL", b"canonicalURL", "description", b"description", "matchedText", b"matchedText", "previewType", b"previewType", "text", b"text", "thumbnail", b"thumbnail", "title", b"title"]) -> None: ...

    @final
    class LocationMessage(Message):
        DESCRIPTOR: Descriptor

        LOCATION_FIELD_NUMBER: int
        ADDRESS_FIELD_NUMBER: int
        address: str
        @property
        def location(self) -> ConsumerApplication.Location: ...
        def __init__(
            self,
            *,
            location: ConsumerApplication.Location | None = ...,
            address: str | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["address", b"address", "location", b"location"]) -> bool: ...
        def ClearField(self, field_name: Literal["address", b"address", "location", b"location"]) -> None: ...

    @final
    class StickerMessage(Message):
        DESCRIPTOR: Descriptor

        STICKER_FIELD_NUMBER: int
        @property
        def sticker(self) -> SubProtocol: ...
        def __init__(
            self,
            *,
            sticker: SubProtocol | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["sticker", b"sticker"]) -> bool: ...
        def ClearField(self, field_name: Literal["sticker", b"sticker"]) -> None: ...

    @final
    class DocumentMessage(Message):
        DESCRIPTOR: Descriptor

        DOCUMENT_FIELD_NUMBER: int
        FILENAME_FIELD_NUMBER: int
        fileName: str
        @property
        def document(self) -> SubProtocol: ...
        def __init__(
            self,
            *,
            document: SubProtocol | None = ...,
            fileName: str | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["document", b"document", "fileName", b"fileName"]) -> bool: ...
        def ClearField(self, field_name: Literal["document", b"document", "fileName", b"fileName"]) -> None: ...

    @final
    class VideoMessage(Message):
        DESCRIPTOR: Descriptor

        VIDEO_FIELD_NUMBER: int
        CAPTION_FIELD_NUMBER: int
        @property
        def video(self) -> SubProtocol: ...
        @property
        def caption(self) -> MessageText: ...
        def __init__(
            self,
            *,
            video: SubProtocol | None = ...,
            caption: MessageText | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["caption", b"caption", "video", b"video"]) -> bool: ...
        def ClearField(self, field_name: Literal["caption", b"caption", "video", b"video"]) -> None: ...

    @final
    class AudioMessage(Message):
        DESCRIPTOR: Descriptor

        AUDIO_FIELD_NUMBER: int
        PTT_FIELD_NUMBER: int
        PTT: bool
        @property
        def audio(self) -> SubProtocol: ...
        def __init__(
            self,
            *,
            audio: SubProtocol | None = ...,
            PTT: bool | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["PTT", b"PTT", "audio", b"audio"]) -> bool: ...
        def ClearField(self, field_name: Literal["PTT", b"PTT", "audio", b"audio"]) -> None: ...

    @final
    class ImageMessage(Message):
        DESCRIPTOR: Descriptor

        IMAGE_FIELD_NUMBER: int
        CAPTION_FIELD_NUMBER: int
        @property
        def image(self) -> SubProtocol: ...
        @property
        def caption(self) -> MessageText: ...
        def __init__(
            self,
            *,
            image: SubProtocol | None = ...,
            caption: MessageText | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["caption", b"caption", "image", b"image"]) -> bool: ...
        def ClearField(self, field_name: Literal["caption", b"caption", "image", b"image"]) -> None: ...

    @final
    class InteractiveAnnotation(Message):
        DESCRIPTOR: Descriptor

        LOCATION_FIELD_NUMBER: int
        POLYGONVERTICES_FIELD_NUMBER: int
        @property
        def location(self) -> ConsumerApplication.Location: ...
        @property
        def polygonVertices(self) -> RepeatedCompositeFieldContainer[ConsumerApplication.Point]: ...
        def __init__(
            self,
            *,
            location: ConsumerApplication.Location | None = ...,
            polygonVertices: Iterable[ConsumerApplication.Point] | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["action", b"action", "location", b"location"]) -> bool: ...
        def ClearField(self, field_name: Literal["action", b"action", "location", b"location", "polygonVertices", b"polygonVertices"]) -> None: ...
        def WhichOneof(self, oneof_group: Literal["action", b"action"]) -> Literal["location"] | None: ...

    @final
    class Point(Message):
        DESCRIPTOR: Descriptor

        X_FIELD_NUMBER: int
        Y_FIELD_NUMBER: int
        x: float
        y: float
        def __init__(
            self,
            *,
            x: float | None = ...,
            y: float | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["x", b"x", "y", b"y"]) -> bool: ...
        def ClearField(self, field_name: Literal["x", b"x", "y", b"y"]) -> None: ...

    @final
    class Location(Message):
        DESCRIPTOR: Descriptor

        DEGREESLATITUDE_FIELD_NUMBER: int
        DEGREESLONGITUDE_FIELD_NUMBER: int
        NAME_FIELD_NUMBER: int
        degreesLatitude: float
        degreesLongitude: float
        name: str
        def __init__(
            self,
            *,
            degreesLatitude: float | None = ...,
            degreesLongitude: float | None = ...,
            name: str | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["degreesLatitude", b"degreesLatitude", "degreesLongitude", b"degreesLongitude", "name", b"name"]) -> bool: ...
        def ClearField(self, field_name: Literal["degreesLatitude", b"degreesLatitude", "degreesLongitude", b"degreesLongitude", "name", b"name"]) -> None: ...

    @final
    class MediaPayload(Message):
        DESCRIPTOR: Descriptor

        PROTOCOL_FIELD_NUMBER: int
        @property
        def protocol(self) -> SubProtocol: ...
        def __init__(
            self,
            *,
            protocol: SubProtocol | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["protocol", b"protocol"]) -> bool: ...
        def ClearField(self, field_name: Literal["protocol", b"protocol"]) -> None: ...

    PAYLOAD_FIELD_NUMBER: int
    METADATA_FIELD_NUMBER: int
    @property
    def payload(self) -> ConsumerApplication.Payload: ...
    @property
    def metadata(self) -> ConsumerApplication.Metadata: ...
    def __init__(
        self,
        *,
        payload: ConsumerApplication.Payload | None = ...,
        metadata: ConsumerApplication.Metadata | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["metadata", b"metadata", "payload", b"payload"]) -> bool: ...
    def ClearField(self, field_name: Literal["metadata", b"metadata", "payload", b"payload"]) -> None: ...
