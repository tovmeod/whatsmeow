"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import sys

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
from builtins import (
    bool,
    bytes,
    int,
    str,
    type,
)
from collections.abc import (
    Iterable,
)
from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    Literal,
    NewType,
    final,
)

DESCRIPTOR: FileDescriptor

@final
class UserPassword(Message):
    DESCRIPTOR: Descriptor

    class _Transformer:
        ValueType = NewType("ValueType", int)
        V: typing_extensions.TypeAlias = ValueType

    class _TransformerEnumTypeWrapper(_EnumTypeWrapper[UserPassword._Transformer.ValueType], type):
        DESCRIPTOR: EnumDescriptor
        NONE: UserPassword._Transformer.ValueType  # 0
        PBKDF2_HMAC_SHA512: UserPassword._Transformer.ValueType  # 1
        PBKDF2_HMAC_SHA384: UserPassword._Transformer.ValueType  # 2

    class Transformer(_Transformer, metaclass=_TransformerEnumTypeWrapper): ...
    NONE: UserPassword.Transformer.ValueType  # 0
    PBKDF2_HMAC_SHA512: UserPassword.Transformer.ValueType  # 1
    PBKDF2_HMAC_SHA384: UserPassword.Transformer.ValueType  # 2

    class _Encoding:
        ValueType = NewType("ValueType", int)
        V: typing_extensions.TypeAlias = ValueType

    class _EncodingEnumTypeWrapper(_EnumTypeWrapper[UserPassword._Encoding.ValueType], type):
        DESCRIPTOR: EnumDescriptor
        UTF8: UserPassword._Encoding.ValueType  # 0
        UTF8_BROKEN: UserPassword._Encoding.ValueType  # 1

    class Encoding(_Encoding, metaclass=_EncodingEnumTypeWrapper): ...
    UTF8: UserPassword.Encoding.ValueType  # 0
    UTF8_BROKEN: UserPassword.Encoding.ValueType  # 1

    @final
    class TransformerArg(Message):
        DESCRIPTOR: Descriptor

        @final
        class Value(Message):
            DESCRIPTOR: Descriptor

            ASBLOB_FIELD_NUMBER: int
            ASUNSIGNEDINTEGER_FIELD_NUMBER: int
            asBlob: bytes
            asUnsignedInteger: int
            def __init__(
                self,
                *,
                asBlob: bytes | None = ...,
                asUnsignedInteger: int | None = ...,
            ) -> None: ...
            def HasField(self, field_name: Literal["asBlob", b"asBlob", "asUnsignedInteger", b"asUnsignedInteger", "value", b"value"]) -> bool: ...
            def ClearField(self, field_name: Literal["asBlob", b"asBlob", "asUnsignedInteger", b"asUnsignedInteger", "value", b"value"]) -> None: ...
            def WhichOneof(self, oneof_group: Literal["value", b"value"]) -> Literal["asBlob", "asUnsignedInteger"] | None: ...

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: str
        @property
        def value(self) -> UserPassword.TransformerArg.Value: ...
        def __init__(
            self,
            *,
            key: str | None = ...,
            value: UserPassword.TransformerArg.Value | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["key", b"key", "value", b"value"]) -> bool: ...
        def ClearField(self, field_name: Literal["key", b"key", "value", b"value"]) -> None: ...

    ENCODING_FIELD_NUMBER: int
    TRANSFORMER_FIELD_NUMBER: int
    TRANSFORMERARG_FIELD_NUMBER: int
    TRANSFORMEDDATA_FIELD_NUMBER: int
    encoding: UserPassword.Encoding.ValueType
    transformer: UserPassword.Transformer.ValueType
    transformedData: bytes
    @property
    def transformerArg(self) -> RepeatedCompositeFieldContainer[UserPassword.TransformerArg]: ...
    def __init__(
        self,
        *,
        encoding: UserPassword.Encoding.ValueType | None = ...,
        transformer: UserPassword.Transformer.ValueType | None = ...,
        transformerArg: Iterable[UserPassword.TransformerArg] | None = ...,
        transformedData: bytes | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["encoding", b"encoding", "transformedData", b"transformedData", "transformer", b"transformer"]) -> bool: ...
    def ClearField(self, field_name: Literal["encoding", b"encoding", "transformedData", b"transformedData", "transformer", b"transformer", "transformerArg", b"transformerArg"]) -> None: ...
