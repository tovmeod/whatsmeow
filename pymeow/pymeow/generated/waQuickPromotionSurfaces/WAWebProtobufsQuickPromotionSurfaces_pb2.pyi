"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import sys

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
from builtins import (
    bool,
    int,
    str,
    type,
)
from collections.abc import (
    Iterable,
)
from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    Literal,
    NewType,
    final,
)

DESCRIPTOR: FileDescriptor

@final
class QP(Message):
    DESCRIPTOR: Descriptor

    class _FilterResult:
        ValueType = NewType("ValueType", int)
        V: typing_extensions.TypeAlias = ValueType

    class _FilterResultEnumTypeWrapper(_EnumTypeWrapper[QP._FilterResult.ValueType], type):
        DESCRIPTOR: EnumDescriptor
        TRUE: QP._FilterResult.ValueType  # 1
        FALSE: QP._FilterResult.ValueType  # 2
        UNKNOWN: QP._FilterResult.ValueType  # 3

    class FilterResult(_FilterResult, metaclass=_FilterResultEnumTypeWrapper): ...
    TRUE: QP.FilterResult.ValueType  # 1
    FALSE: QP.FilterResult.ValueType  # 2
    UNKNOWN: QP.FilterResult.ValueType  # 3

    class _FilterClientNotSupportedConfig:
        ValueType = NewType("ValueType", int)
        V: typing_extensions.TypeAlias = ValueType

    class _FilterClientNotSupportedConfigEnumTypeWrapper(_EnumTypeWrapper[QP._FilterClientNotSupportedConfig.ValueType], type):
        DESCRIPTOR: EnumDescriptor
        PASS_BY_DEFAULT: QP._FilterClientNotSupportedConfig.ValueType  # 1
        FAIL_BY_DEFAULT: QP._FilterClientNotSupportedConfig.ValueType  # 2

    class FilterClientNotSupportedConfig(_FilterClientNotSupportedConfig, metaclass=_FilterClientNotSupportedConfigEnumTypeWrapper): ...
    PASS_BY_DEFAULT: QP.FilterClientNotSupportedConfig.ValueType  # 1
    FAIL_BY_DEFAULT: QP.FilterClientNotSupportedConfig.ValueType  # 2

    class _ClauseType:
        ValueType = NewType("ValueType", int)
        V: typing_extensions.TypeAlias = ValueType

    class _ClauseTypeEnumTypeWrapper(_EnumTypeWrapper[QP._ClauseType.ValueType], type):
        DESCRIPTOR: EnumDescriptor
        AND: QP._ClauseType.ValueType  # 1
        OR: QP._ClauseType.ValueType  # 2
        NOR: QP._ClauseType.ValueType  # 3

    class ClauseType(_ClauseType, metaclass=_ClauseTypeEnumTypeWrapper): ...
    AND: QP.ClauseType.ValueType  # 1
    OR: QP.ClauseType.ValueType  # 2
    NOR: QP.ClauseType.ValueType  # 3

    @final
    class FilterClause(Message):
        DESCRIPTOR: Descriptor

        CLAUSETYPE_FIELD_NUMBER: int
        CLAUSES_FIELD_NUMBER: int
        FILTERS_FIELD_NUMBER: int
        clauseType: QP.ClauseType.ValueType
        @property
        def clauses(self) -> RepeatedCompositeFieldContainer[QP.FilterClause]: ...
        @property
        def filters(self) -> RepeatedCompositeFieldContainer[QP.Filter]: ...
        def __init__(
            self,
            *,
            clauseType: QP.ClauseType.ValueType | None = ...,
            clauses: Iterable[QP.FilterClause] | None = ...,
            filters: Iterable[QP.Filter] | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["clauseType", b"clauseType"]) -> bool: ...
        def ClearField(self, field_name: Literal["clauseType", b"clauseType", "clauses", b"clauses", "filters", b"filters"]) -> None: ...

    @final
    class Filter(Message):
        DESCRIPTOR: Descriptor

        FILTERNAME_FIELD_NUMBER: int
        PARAMETERS_FIELD_NUMBER: int
        FILTERRESULT_FIELD_NUMBER: int
        CLIENTNOTSUPPORTEDCONFIG_FIELD_NUMBER: int
        filterName: str
        filterResult: QP.FilterResult.ValueType
        clientNotSupportedConfig: QP.FilterClientNotSupportedConfig.ValueType
        @property
        def parameters(self) -> RepeatedCompositeFieldContainer[QP.FilterParameters]: ...
        def __init__(
            self,
            *,
            filterName: str | None = ...,
            parameters: Iterable[QP.FilterParameters] | None = ...,
            filterResult: QP.FilterResult.ValueType | None = ...,
            clientNotSupportedConfig: QP.FilterClientNotSupportedConfig.ValueType | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["clientNotSupportedConfig", b"clientNotSupportedConfig", "filterName", b"filterName", "filterResult", b"filterResult"]) -> bool: ...
        def ClearField(self, field_name: Literal["clientNotSupportedConfig", b"clientNotSupportedConfig", "filterName", b"filterName", "filterResult", b"filterResult", "parameters", b"parameters"]) -> None: ...

    @final
    class FilterParameters(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: str
        value: str
        def __init__(
            self,
            *,
            key: str | None = ...,
            value: str | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["key", b"key", "value", b"value"]) -> bool: ...
        def ClearField(self, field_name: Literal["key", b"key", "value", b"value"]) -> None: ...

    def __init__(
        self,
    ) -> None: ...
