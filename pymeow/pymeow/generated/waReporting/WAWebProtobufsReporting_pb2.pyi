"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

from builtins import (
    bool,
    int,
)
from collections.abc import (
    Mapping,
)
from google.protobuf.descriptor import (
    Descriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    MessageMap,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    Literal,
    final,
)

DESCRIPTOR: FileDescriptor

@final
class Reportable(Message):
    DESCRIPTOR: Descriptor

    MINVERSION_FIELD_NUMBER: int
    MAXVERSION_FIELD_NUMBER: int
    NOTREPORTABLEMINVERSION_FIELD_NUMBER: int
    NEVER_FIELD_NUMBER: int
    minVersion: int
    maxVersion: int
    notReportableMinVersion: int
    never: bool
    def __init__(
        self,
        *,
        minVersion: int = ...,
        maxVersion: int = ...,
        notReportableMinVersion: int = ...,
        never: bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["maxVersion", b"maxVersion", "minVersion", b"minVersion", "never", b"never", "notReportableMinVersion", b"notReportableMinVersion"]) -> None: ...

@final
class Config(Message):
    DESCRIPTOR: Descriptor

    @final
    class FieldEntry(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: int
        @property
        def value(self) -> Field: ...
        def __init__(
            self,
            *,
            key: int = ...,
            value: Field | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["value", b"value"]) -> bool: ...
        def ClearField(self, field_name: Literal["key", b"key", "value", b"value"]) -> None: ...

    FIELD_FIELD_NUMBER: int
    VERSION_FIELD_NUMBER: int
    version: int
    @property
    def field(self) -> MessageMap[int, Field]: ...
    def __init__(
        self,
        *,
        field: Mapping[int, Field] | None = ...,
        version: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["field", b"field", "version", b"version"]) -> None: ...

@final
class Field(Message):
    DESCRIPTOR: Descriptor

    @final
    class SubfieldEntry(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: int
        @property
        def value(self) -> Field: ...
        def __init__(
            self,
            *,
            key: int = ...,
            value: Field | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["value", b"value"]) -> bool: ...
        def ClearField(self, field_name: Literal["key", b"key", "value", b"value"]) -> None: ...

    MINVERSION_FIELD_NUMBER: int
    MAXVERSION_FIELD_NUMBER: int
    NOTREPORTABLEMINVERSION_FIELD_NUMBER: int
    ISMESSAGE_FIELD_NUMBER: int
    SUBFIELD_FIELD_NUMBER: int
    minVersion: int
    maxVersion: int
    notReportableMinVersion: int
    isMessage: bool
    @property
    def subfield(self) -> MessageMap[int, Field]: ...
    def __init__(
        self,
        *,
        minVersion: int = ...,
        maxVersion: int = ...,
        notReportableMinVersion: int = ...,
        isMessage: bool = ...,
        subfield: Mapping[int, Field] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["isMessage", b"isMessage", "maxVersion", b"maxVersion", "minVersion", b"minVersion", "notReportableMinVersion", b"notReportableMinVersion", "subfield", b"subfield"]) -> None: ...
