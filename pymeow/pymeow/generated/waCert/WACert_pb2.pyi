"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

from builtins import (
    bool,
    bytes,
    int,
    str,
)
from google.protobuf.descriptor import (
    Descriptor,
    FileDescriptor,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    Literal,
    final,
)

DESCRIPTOR: FileDescriptor

@final
class NoiseCertificate(Message):
    DESCRIPTOR: Descriptor

    @final
    class Details(Message):
        DESCRIPTOR: Descriptor

        SERIAL_FIELD_NUMBER: int
        ISSUER_FIELD_NUMBER: int
        EXPIRES_FIELD_NUMBER: int
        SUBJECT_FIELD_NUMBER: int
        KEY_FIELD_NUMBER: int
        serial: int
        issuer: str
        expires: int
        subject: str
        key: bytes
        def __init__(
            self,
            *,
            serial: int | None = ...,
            issuer: str | None = ...,
            expires: int | None = ...,
            subject: str | None = ...,
            key: bytes | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["expires", b"expires", "issuer", b"issuer", "key", b"key", "serial", b"serial", "subject", b"subject"]) -> bool: ...
        def ClearField(self, field_name: Literal["expires", b"expires", "issuer", b"issuer", "key", b"key", "serial", b"serial", "subject", b"subject"]) -> None: ...

    DETAILS_FIELD_NUMBER: int
    SIGNATURE_FIELD_NUMBER: int
    details: bytes
    signature: bytes
    def __init__(
        self,
        *,
        details: bytes | None = ...,
        signature: bytes | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["details", b"details", "signature", b"signature"]) -> bool: ...
    def ClearField(self, field_name: Literal["details", b"details", "signature", b"signature"]) -> None: ...

@final
class CertChain(Message):
    DESCRIPTOR: Descriptor

    @final
    class NoiseCertificate(Message):
        DESCRIPTOR: Descriptor

        @final
        class Details(Message):
            DESCRIPTOR: Descriptor

            SERIAL_FIELD_NUMBER: int
            ISSUERSERIAL_FIELD_NUMBER: int
            KEY_FIELD_NUMBER: int
            NOTBEFORE_FIELD_NUMBER: int
            NOTAFTER_FIELD_NUMBER: int
            serial: int
            issuerSerial: int
            key: bytes
            notBefore: int
            notAfter: int
            def __init__(
                self,
                *,
                serial: int | None = ...,
                issuerSerial: int | None = ...,
                key: bytes | None = ...,
                notBefore: int | None = ...,
                notAfter: int | None = ...,
            ) -> None: ...
            def HasField(self, field_name: Literal["issuerSerial", b"issuerSerial", "key", b"key", "notAfter", b"notAfter", "notBefore", b"notBefore", "serial", b"serial"]) -> bool: ...
            def ClearField(self, field_name: Literal["issuerSerial", b"issuerSerial", "key", b"key", "notAfter", b"notAfter", "notBefore", b"notBefore", "serial", b"serial"]) -> None: ...

        DETAILS_FIELD_NUMBER: int
        SIGNATURE_FIELD_NUMBER: int
        details: bytes
        signature: bytes
        def __init__(
            self,
            *,
            details: bytes | None = ...,
            signature: bytes | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["details", b"details", "signature", b"signature"]) -> bool: ...
        def ClearField(self, field_name: Literal["details", b"details", "signature", b"signature"]) -> None: ...

    LEAF_FIELD_NUMBER: int
    INTERMEDIATE_FIELD_NUMBER: int
    @property
    def leaf(self) -> CertChain.NoiseCertificate: ...
    @property
    def intermediate(self) -> CertChain.NoiseCertificate: ...
    def __init__(
        self,
        *,
        leaf: CertChain.NoiseCertificate | None = ...,
        intermediate: CertChain.NoiseCertificate | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["intermediate", b"intermediate", "leaf", b"leaf"]) -> bool: ...
    def ClearField(self, field_name: Literal["intermediate", b"intermediate", "leaf", b"leaf"]) -> None: ...
