"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import sys

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
from builtins import (
    bool,
    bytes,
    int,
    str,
    type,
)
from collections.abc import (
    Iterable,
)
from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    Literal,
    NewType,
    final,
)

DESCRIPTOR: FileDescriptor

@final
class BizAccountLinkInfo(Message):
    DESCRIPTOR: Descriptor

    class _AccountType:
        ValueType = NewType("ValueType", int)
        V: typing_extensions.TypeAlias = ValueType

    class _AccountTypeEnumTypeWrapper(_EnumTypeWrapper[BizAccountLinkInfo._AccountType.ValueType], type):
        DESCRIPTOR: EnumDescriptor
        ENTERPRISE: BizAccountLinkInfo._AccountType.ValueType  # 0

    class AccountType(_AccountType, metaclass=_AccountTypeEnumTypeWrapper): ...
    ENTERPRISE: BizAccountLinkInfo.AccountType.ValueType  # 0

    class _HostStorageType:
        ValueType = NewType("ValueType", int)
        V: typing_extensions.TypeAlias = ValueType

    class _HostStorageTypeEnumTypeWrapper(_EnumTypeWrapper[BizAccountLinkInfo._HostStorageType.ValueType], type):
        DESCRIPTOR: EnumDescriptor
        ON_PREMISE: BizAccountLinkInfo._HostStorageType.ValueType  # 0
        FACEBOOK: BizAccountLinkInfo._HostStorageType.ValueType  # 1

    class HostStorageType(_HostStorageType, metaclass=_HostStorageTypeEnumTypeWrapper): ...
    ON_PREMISE: BizAccountLinkInfo.HostStorageType.ValueType  # 0
    FACEBOOK: BizAccountLinkInfo.HostStorageType.ValueType  # 1

    WHATSAPPBIZACCTFBID_FIELD_NUMBER: int
    WHATSAPPACCTNUMBER_FIELD_NUMBER: int
    ISSUETIME_FIELD_NUMBER: int
    HOSTSTORAGE_FIELD_NUMBER: int
    ACCOUNTTYPE_FIELD_NUMBER: int
    whatsappBizAcctFbid: int
    whatsappAcctNumber: str
    issueTime: int
    hostStorage: BizAccountLinkInfo.HostStorageType.ValueType
    accountType: BizAccountLinkInfo.AccountType.ValueType
    def __init__(
        self,
        *,
        whatsappBizAcctFbid: int | None = ...,
        whatsappAcctNumber: str | None = ...,
        issueTime: int | None = ...,
        hostStorage: BizAccountLinkInfo.HostStorageType.ValueType | None = ...,
        accountType: BizAccountLinkInfo.AccountType.ValueType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["accountType", b"accountType", "hostStorage", b"hostStorage", "issueTime", b"issueTime", "whatsappAcctNumber", b"whatsappAcctNumber", "whatsappBizAcctFbid", b"whatsappBizAcctFbid"]) -> bool: ...
    def ClearField(self, field_name: Literal["accountType", b"accountType", "hostStorage", b"hostStorage", "issueTime", b"issueTime", "whatsappAcctNumber", b"whatsappAcctNumber", "whatsappBizAcctFbid", b"whatsappBizAcctFbid"]) -> None: ...

@final
class BizIdentityInfo(Message):
    DESCRIPTOR: Descriptor

    class _ActualActorsType:
        ValueType = NewType("ValueType", int)
        V: typing_extensions.TypeAlias = ValueType

    class _ActualActorsTypeEnumTypeWrapper(_EnumTypeWrapper[BizIdentityInfo._ActualActorsType.ValueType], type):
        DESCRIPTOR: EnumDescriptor
        SELF: BizIdentityInfo._ActualActorsType.ValueType  # 0
        BSP: BizIdentityInfo._ActualActorsType.ValueType  # 1

    class ActualActorsType(_ActualActorsType, metaclass=_ActualActorsTypeEnumTypeWrapper): ...
    SELF: BizIdentityInfo.ActualActorsType.ValueType  # 0
    BSP: BizIdentityInfo.ActualActorsType.ValueType  # 1

    class _HostStorageType:
        ValueType = NewType("ValueType", int)
        V: typing_extensions.TypeAlias = ValueType

    class _HostStorageTypeEnumTypeWrapper(_EnumTypeWrapper[BizIdentityInfo._HostStorageType.ValueType], type):
        DESCRIPTOR: EnumDescriptor
        ON_PREMISE: BizIdentityInfo._HostStorageType.ValueType  # 0
        FACEBOOK: BizIdentityInfo._HostStorageType.ValueType  # 1

    class HostStorageType(_HostStorageType, metaclass=_HostStorageTypeEnumTypeWrapper): ...
    ON_PREMISE: BizIdentityInfo.HostStorageType.ValueType  # 0
    FACEBOOK: BizIdentityInfo.HostStorageType.ValueType  # 1

    class _VerifiedLevelValue:
        ValueType = NewType("ValueType", int)
        V: typing_extensions.TypeAlias = ValueType

    class _VerifiedLevelValueEnumTypeWrapper(_EnumTypeWrapper[BizIdentityInfo._VerifiedLevelValue.ValueType], type):
        DESCRIPTOR: EnumDescriptor
        UNKNOWN: BizIdentityInfo._VerifiedLevelValue.ValueType  # 0
        LOW: BizIdentityInfo._VerifiedLevelValue.ValueType  # 1
        HIGH: BizIdentityInfo._VerifiedLevelValue.ValueType  # 2

    class VerifiedLevelValue(_VerifiedLevelValue, metaclass=_VerifiedLevelValueEnumTypeWrapper): ...
    UNKNOWN: BizIdentityInfo.VerifiedLevelValue.ValueType  # 0
    LOW: BizIdentityInfo.VerifiedLevelValue.ValueType  # 1
    HIGH: BizIdentityInfo.VerifiedLevelValue.ValueType  # 2

    VLEVEL_FIELD_NUMBER: int
    VNAMECERT_FIELD_NUMBER: int
    SIGNED_FIELD_NUMBER: int
    REVOKED_FIELD_NUMBER: int
    HOSTSTORAGE_FIELD_NUMBER: int
    ACTUALACTORS_FIELD_NUMBER: int
    PRIVACYMODETS_FIELD_NUMBER: int
    FEATURECONTROLS_FIELD_NUMBER: int
    vlevel: BizIdentityInfo.VerifiedLevelValue.ValueType
    signed: bool
    revoked: bool
    hostStorage: BizIdentityInfo.HostStorageType.ValueType
    actualActors: BizIdentityInfo.ActualActorsType.ValueType
    privacyModeTS: int
    featureControls: int
    @property
    def vnameCert(self) -> VerifiedNameCertificate: ...
    def __init__(
        self,
        *,
        vlevel: BizIdentityInfo.VerifiedLevelValue.ValueType | None = ...,
        vnameCert: VerifiedNameCertificate | None = ...,
        signed: bool | None = ...,
        revoked: bool | None = ...,
        hostStorage: BizIdentityInfo.HostStorageType.ValueType | None = ...,
        actualActors: BizIdentityInfo.ActualActorsType.ValueType | None = ...,
        privacyModeTS: int | None = ...,
        featureControls: int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["actualActors", b"actualActors", "featureControls", b"featureControls", "hostStorage", b"hostStorage", "privacyModeTS", b"privacyModeTS", "revoked", b"revoked", "signed", b"signed", "vlevel", b"vlevel", "vnameCert", b"vnameCert"]) -> bool: ...
    def ClearField(self, field_name: Literal["actualActors", b"actualActors", "featureControls", b"featureControls", "hostStorage", b"hostStorage", "privacyModeTS", b"privacyModeTS", "revoked", b"revoked", "signed", b"signed", "vlevel", b"vlevel", "vnameCert", b"vnameCert"]) -> None: ...

@final
class LocalizedName(Message):
    DESCRIPTOR: Descriptor

    LG_FIELD_NUMBER: int
    LC_FIELD_NUMBER: int
    VERIFIEDNAME_FIELD_NUMBER: int
    lg: str
    lc: str
    verifiedName: str
    def __init__(
        self,
        *,
        lg: str | None = ...,
        lc: str | None = ...,
        verifiedName: str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["lc", b"lc", "lg", b"lg", "verifiedName", b"verifiedName"]) -> bool: ...
    def ClearField(self, field_name: Literal["lc", b"lc", "lg", b"lg", "verifiedName", b"verifiedName"]) -> None: ...

@final
class VerifiedNameCertificate(Message):
    DESCRIPTOR: Descriptor

    @final
    class Details(Message):
        DESCRIPTOR: Descriptor

        SERIAL_FIELD_NUMBER: int
        ISSUER_FIELD_NUMBER: int
        VERIFIEDNAME_FIELD_NUMBER: int
        LOCALIZEDNAMES_FIELD_NUMBER: int
        ISSUETIME_FIELD_NUMBER: int
        serial: int
        issuer: str
        verifiedName: str
        issueTime: int
        @property
        def localizedNames(self) -> RepeatedCompositeFieldContainer[LocalizedName]: ...
        def __init__(
            self,
            *,
            serial: int | None = ...,
            issuer: str | None = ...,
            verifiedName: str | None = ...,
            localizedNames: Iterable[LocalizedName] | None = ...,
            issueTime: int | None = ...,
        ) -> None: ...
        def HasField(self, field_name: Literal["issueTime", b"issueTime", "issuer", b"issuer", "serial", b"serial", "verifiedName", b"verifiedName"]) -> bool: ...
        def ClearField(self, field_name: Literal["issueTime", b"issueTime", "issuer", b"issuer", "localizedNames", b"localizedNames", "serial", b"serial", "verifiedName", b"verifiedName"]) -> None: ...

    DETAILS_FIELD_NUMBER: int
    SIGNATURE_FIELD_NUMBER: int
    SERVERSIGNATURE_FIELD_NUMBER: int
    details: bytes
    signature: bytes
    serverSignature: bytes
    def __init__(
        self,
        *,
        details: bytes | None = ...,
        signature: bytes | None = ...,
        serverSignature: bytes | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["details", b"details", "serverSignature", b"serverSignature", "signature", b"signature"]) -> bool: ...
    def ClearField(self, field_name: Literal["details", b"details", "serverSignature", b"serverSignature", "signature", b"signature"]) -> None: ...

@final
class BizAccountPayload(Message):
    DESCRIPTOR: Descriptor

    VNAMECERT_FIELD_NUMBER: int
    BIZACCTLINKINFO_FIELD_NUMBER: int
    bizAcctLinkInfo: bytes
    @property
    def vnameCert(self) -> VerifiedNameCertificate: ...
    def __init__(
        self,
        *,
        vnameCert: VerifiedNameCertificate | None = ...,
        bizAcctLinkInfo: bytes | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["bizAcctLinkInfo", b"bizAcctLinkInfo", "vnameCert", b"vnameCert"]) -> bool: ...
    def ClearField(self, field_name: Literal["bizAcctLinkInfo", b"bizAcctLinkInfo", "vnameCert", b"vnameCert"]) -> None: ...
