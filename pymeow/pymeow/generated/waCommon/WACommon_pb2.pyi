"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import sys

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
from builtins import (
    bool,
    bytes,
    int,
    str,
    type,
)
from collections.abc import (
    Iterable,
)
from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
    RepeatedScalarFieldContainer,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    Literal,
    NewType,
    final,
)

DESCRIPTOR: FileDescriptor

class _FutureProofBehavior:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _FutureProofBehaviorEnumTypeWrapper(_EnumTypeWrapper[_FutureProofBehavior.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    PLACEHOLDER: _FutureProofBehavior.ValueType  # 0
    NO_PLACEHOLDER: _FutureProofBehavior.ValueType  # 1
    IGNORE: _FutureProofBehavior.ValueType  # 2

class FutureProofBehavior(_FutureProofBehavior, metaclass=_FutureProofBehaviorEnumTypeWrapper): ...

PLACEHOLDER: FutureProofBehavior.ValueType  # 0
NO_PLACEHOLDER: FutureProofBehavior.ValueType  # 1
IGNORE: FutureProofBehavior.ValueType  # 2

@final
class MessageKey(Message):
    DESCRIPTOR: Descriptor

    REMOTEJID_FIELD_NUMBER: int
    FROMME_FIELD_NUMBER: int
    ID_FIELD_NUMBER: int
    PARTICIPANT_FIELD_NUMBER: int
    remoteJID: str
    fromMe: bool
    ID: str
    participant: str
    def __init__(
        self,
        *,
        remoteJID: str | None = ...,
        fromMe: bool | None = ...,
        ID: str | None = ...,
        participant: str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["ID", b"ID", "fromMe", b"fromMe", "participant", b"participant", "remoteJID", b"remoteJID"]) -> bool: ...
    def ClearField(self, field_name: Literal["ID", b"ID", "fromMe", b"fromMe", "participant", b"participant", "remoteJID", b"remoteJID"]) -> None: ...

@final
class Command(Message):
    DESCRIPTOR: Descriptor

    class _CommandType:
        ValueType = NewType("ValueType", int)
        V: typing_extensions.TypeAlias = ValueType

    class _CommandTypeEnumTypeWrapper(_EnumTypeWrapper[Command._CommandType.ValueType], type):
        DESCRIPTOR: EnumDescriptor
        EVERYONE: Command._CommandType.ValueType  # 1
        SILENT: Command._CommandType.ValueType  # 2
        AI: Command._CommandType.ValueType  # 3
        AI_IMAGINE: Command._CommandType.ValueType  # 4

    class CommandType(_CommandType, metaclass=_CommandTypeEnumTypeWrapper): ...
    EVERYONE: Command.CommandType.ValueType  # 1
    SILENT: Command.CommandType.ValueType  # 2
    AI: Command.CommandType.ValueType  # 3
    AI_IMAGINE: Command.CommandType.ValueType  # 4

    COMMANDTYPE_FIELD_NUMBER: int
    OFFSET_FIELD_NUMBER: int
    LENGTH_FIELD_NUMBER: int
    VALIDATIONTOKEN_FIELD_NUMBER: int
    commandType: Command.CommandType.ValueType
    offset: int
    length: int
    validationToken: str
    def __init__(
        self,
        *,
        commandType: Command.CommandType.ValueType | None = ...,
        offset: int | None = ...,
        length: int | None = ...,
        validationToken: str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["commandType", b"commandType", "length", b"length", "offset", b"offset", "validationToken", b"validationToken"]) -> bool: ...
    def ClearField(self, field_name: Literal["commandType", b"commandType", "length", b"length", "offset", b"offset", "validationToken", b"validationToken"]) -> None: ...

@final
class Mention(Message):
    DESCRIPTOR: Descriptor

    class _MentionType:
        ValueType = NewType("ValueType", int)
        V: typing_extensions.TypeAlias = ValueType

    class _MentionTypeEnumTypeWrapper(_EnumTypeWrapper[Mention._MentionType.ValueType], type):
        DESCRIPTOR: EnumDescriptor
        PROFILE: Mention._MentionType.ValueType  # 0

    class MentionType(_MentionType, metaclass=_MentionTypeEnumTypeWrapper): ...
    PROFILE: Mention.MentionType.ValueType  # 0

    MENTIONTYPE_FIELD_NUMBER: int
    MENTIONEDJID_FIELD_NUMBER: int
    OFFSET_FIELD_NUMBER: int
    LENGTH_FIELD_NUMBER: int
    mentionType: Mention.MentionType.ValueType
    mentionedJID: str
    offset: int
    length: int
    def __init__(
        self,
        *,
        mentionType: Mention.MentionType.ValueType | None = ...,
        mentionedJID: str | None = ...,
        offset: int | None = ...,
        length: int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["length", b"length", "mentionType", b"mentionType", "mentionedJID", b"mentionedJID", "offset", b"offset"]) -> bool: ...
    def ClearField(self, field_name: Literal["length", b"length", "mentionType", b"mentionType", "mentionedJID", b"mentionedJID", "offset", b"offset"]) -> None: ...

@final
class MessageText(Message):
    DESCRIPTOR: Descriptor

    TEXT_FIELD_NUMBER: int
    MENTIONEDJID_FIELD_NUMBER: int
    COMMANDS_FIELD_NUMBER: int
    MENTIONS_FIELD_NUMBER: int
    text: str
    @property
    def mentionedJID(self) -> RepeatedScalarFieldContainer[str]: ...
    @property
    def commands(self) -> RepeatedCompositeFieldContainer[Command]: ...
    @property
    def mentions(self) -> RepeatedCompositeFieldContainer[Mention]: ...
    def __init__(
        self,
        *,
        text: str | None = ...,
        mentionedJID: Iterable[str] | None = ...,
        commands: Iterable[Command] | None = ...,
        mentions: Iterable[Mention] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["text", b"text"]) -> bool: ...
    def ClearField(self, field_name: Literal["commands", b"commands", "mentionedJID", b"mentionedJID", "mentions", b"mentions", "text", b"text"]) -> None: ...

@final
class SubProtocol(Message):
    DESCRIPTOR: Descriptor

    PAYLOAD_FIELD_NUMBER: int
    VERSION_FIELD_NUMBER: int
    payload: bytes
    version: int
    def __init__(
        self,
        *,
        payload: bytes | None = ...,
        version: int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["payload", b"payload", "version", b"version"]) -> bool: ...
    def ClearField(self, field_name: Literal["payload", b"payload", "version", b"version"]) -> None: ...

@final
class LimitSharing(Message):
    DESCRIPTOR: Descriptor

    class _Trigger:
        ValueType = NewType("ValueType", int)
        V: typing_extensions.TypeAlias = ValueType

    class _TriggerEnumTypeWrapper(_EnumTypeWrapper[LimitSharing._Trigger.ValueType], type):
        DESCRIPTOR: EnumDescriptor
        UNKNOWN: LimitSharing._Trigger.ValueType  # 0
        CHAT_SETTING: LimitSharing._Trigger.ValueType  # 1
        BIZ_SUPPORTS_FB_HOSTING: LimitSharing._Trigger.ValueType  # 2
        UNKNOWN_GROUP: LimitSharing._Trigger.ValueType  # 3

    class Trigger(_Trigger, metaclass=_TriggerEnumTypeWrapper): ...
    UNKNOWN: LimitSharing.Trigger.ValueType  # 0
    CHAT_SETTING: LimitSharing.Trigger.ValueType  # 1
    BIZ_SUPPORTS_FB_HOSTING: LimitSharing.Trigger.ValueType  # 2
    UNKNOWN_GROUP: LimitSharing.Trigger.ValueType  # 3

    SHARINGLIMITED_FIELD_NUMBER: int
    TRIGGER_FIELD_NUMBER: int
    LIMITSHARINGSETTINGTIMESTAMP_FIELD_NUMBER: int
    INITIATEDBYME_FIELD_NUMBER: int
    sharingLimited: bool
    trigger: LimitSharing.Trigger.ValueType
    limitSharingSettingTimestamp: int
    initiatedByMe: bool
    def __init__(
        self,
        *,
        sharingLimited: bool | None = ...,
        trigger: LimitSharing.Trigger.ValueType | None = ...,
        limitSharingSettingTimestamp: int | None = ...,
        initiatedByMe: bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["initiatedByMe", b"initiatedByMe", "limitSharingSettingTimestamp", b"limitSharingSettingTimestamp", "sharingLimited", b"sharingLimited", "trigger", b"trigger"]) -> bool: ...
    def ClearField(self, field_name: Literal["initiatedByMe", b"initiatedByMe", "limitSharingSettingTimestamp", b"limitSharingSettingTimestamp", "sharingLimited", b"sharingLimited", "trigger", b"trigger"]) -> None: ...
