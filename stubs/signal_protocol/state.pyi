from typing import Optional, List
from signal_protocol.curve import PublicKey, PrivateKey, KeyPair
from signal_protocol.identity_key import IdentityKey

# Type aliases
PreKeyId = int
SignedPreKeyId = int

# Module-level functions
def generate_n_prekeys(n: int, id: PreKeyId) -> List["PreKeyRecord"]: ...

class PreKeyBundle:
	def __init__(
		self,
		registration_id: int,
		device_id: int,
		pre_key_id: Optional[PreKeyId],
		pre_key_public: Optional[PublicKey],
		signed_pre_key_id: SignedPreKeyId,
		signed_pre_key_public: PublicKey,
		signed_pre_key_signature: bytes,
		identity_key: IdentityKey,
	) -> None: ...

	def registration_id(self) -> int: ...
	def device_id(self) -> int: ...
	def pre_key_id(self) -> Optional[PreKeyId]: ...
	def pre_key_public(self) -> Optional[PublicKey]: ...
	def signed_pre_key_id(self) -> SignedPreKeyId: ...
	def signed_pre_key_public(self) -> PublicKey: ...
	def signed_pre_key_signature(self) -> bytes: ...
	def identity_key(self) -> IdentityKey: ...

class PreKeyRecord:
	def __init__(self, id: PreKeyId, keypair: KeyPair) -> None: ...

	@staticmethod
	def deserialize(data: bytes) -> "PreKeyRecord": ...

	def id(self) -> PreKeyId: ...
	def key_pair(self) -> KeyPair: ...
	def public_key(self) -> PublicKey: ...
	def private_key(self) -> PrivateKey: ...
	def serialize(self) -> bytes: ...

class SignedPreKeyRecord:
	def __init__(
		self,
		id: SignedPreKeyId,
		timestamp: int,
		keypair: KeyPair,
		signature: bytes,
	) -> None: ...

	@staticmethod
	def deserialize(data: bytes) -> "SignedPreKeyRecord": ...

	def id(self) -> SignedPreKeyId: ...
	def timestamp(self) -> int: ...
	def signature(self) -> bytes: ...
	def key_pair(self) -> KeyPair: ...
	def public_key(self) -> PublicKey: ...
	def private_key(self) -> PrivateKey: ...
	def serialize(self) -> bytes: ...

class SessionRecord:
	@staticmethod
	def new_fresh() -> "SessionRecord": ...

	@staticmethod
	def deserialize(bytes: bytes) -> "SessionRecord": ...

	def archive_current_state(self) -> None: ...
	def serialize(self) -> bytes: ...
	def session_version(self) -> int: ...
	def remote_registration_id(self) -> int: ...
	def local_registration_id(self) -> int: ...
	def local_identity_key_bytes(self) -> bytes: ...
	def remote_identity_key_bytes(self) -> Optional[bytes]: ...
	def get_receiver_chain_key(self, sender: PublicKey) -> Optional[bytes]: ...
	def has_sender_chain(self) -> bool: ...
	def alice_base_key(self) -> bytes: ...
	def get_sender_chain_key_bytes(self) -> bytes: ...
