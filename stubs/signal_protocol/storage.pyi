from typing import Optional

from signal_protocol.address import ProtocolAddress
from signal_protocol.identity_key import IdentityKey, IdentityKeyPair
from signal_protocol.sender_keys import SenderKeyName, SenderKeyRecord
from signal_protocol.state import PreKeyId, PreKeyRecord, SessionRecord, SignedPreKeyId, SignedPreKeyRecord

class InMemSignalProtocolStore:
	def __init__(self, key_pair: IdentityKeyPair, registration_id: int) -> None: ...

	# IdentityKeyStore methods
	def get_identity_key_pair(self) -> IdentityKeyPair: ...
	def get_local_registration_id(self) -> int: ...
	def save_identity(self, address: ProtocolAddress, identity: IdentityKey) -> bool: ...
	def get_identity(self, address: ProtocolAddress) -> Optional[IdentityKey]: ...

	# SessionStore methods
	def load_session(self, address: ProtocolAddress) -> Optional[SessionRecord]: ...
	def store_session(self, address: ProtocolAddress, record: SessionRecord) -> None: ...

	# PreKeyStore methods
	def get_pre_key(self, id: PreKeyId) -> PreKeyRecord: ...
	def save_pre_key(self, id: PreKeyId, record: PreKeyRecord) -> None: ...
	def remove_pre_key(self, id: PreKeyId) -> None: ...

	# SignedPreKeyStore methods
	def get_signed_pre_key(self, id: SignedPreKeyId) -> SignedPreKeyRecord: ...
	def save_signed_pre_key(self, id: SignedPreKeyId, record: SignedPreKeyRecord) -> None: ...

	# SenderKeyStore methods
	def store_sender_key(self, sender_key_name: SenderKeyName, record: SenderKeyRecord) -> None: ...
	def load_sender_key(self, sender_key_name: SenderKeyName) -> Optional[SenderKeyRecord]: ...
