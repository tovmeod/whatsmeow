from typing import Optional

from signal_protocol.curve import KeyPair, PublicKey
from signal_protocol.identity_key import IdentityKey, IdentityKeyPair
from signal_protocol.state import SessionRecord

# Module-level functions
def initialize_alice_session(parameters: "AliceSignalProtocolParameters") -> SessionRecord: ...
def initialize_bob_session(parameters: "BobSignalProtocolParameters") -> SessionRecord: ...

class AliceSignalProtocolParameters:
	def __init__(
		self,
		our_identity_key_pair: IdentityKeyPair,
		our_base_key_pair: KeyPair,
		their_identity_key: IdentityKey,
		their_signed_pre_key: PublicKey,
		their_one_time_pre_key: Optional[PublicKey],
		their_ratchet_key: PublicKey,
	) -> None: ...

	def our_identity_key_pair(self) -> IdentityKeyPair: ...
	def our_base_key_pair(self) -> KeyPair: ...
	def their_identity_key(self) -> IdentityKey: ...
	def their_signed_pre_key(self) -> PublicKey: ...
	def their_one_time_pre_key(self) -> Optional[PublicKey]: ...
	def their_ratchet_key(self) -> PublicKey: ...

class BobSignalProtocolParameters:
	def __init__(
		self,
		our_identity_key_pair: IdentityKeyPair,
		our_signed_pre_key_pair: KeyPair,
		our_one_time_pre_key_pair: Optional[KeyPair],
		our_ratchet_key_pair: KeyPair,
		their_identity_key: IdentityKey,
		their_base_key: PublicKey,
	) -> None: ...

	def our_identity_key_pair(self) -> IdentityKeyPair: ...
	def our_signed_pre_key_pair(self) -> KeyPair: ...
	def our_one_time_pre_key_pair(self) -> Optional[KeyPair]: ...
	def our_ratchet_key_pair(self) -> KeyPair: ...
	def their_identity_key(self) -> IdentityKey: ...
	def their_base_key(self) -> PublicKey: ...
