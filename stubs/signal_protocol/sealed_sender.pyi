from typing import Any, Union, Optional, List, Dict, Tuple
from signal_protocol.curve import PublicKey, PrivateKey
from signal_protocol.address import ProtocolAddress
from signal_protocol.storage import InMemSignalProtocolStore

# Module-level functions
def sealed_sender_decrypt(
	ciphertext: bytes,
	trust_root: PublicKey,
	timestamp: int,
	local_e164: Optional[str],
	local_uuid: Optional[str],
	local_device_id: int,
	protocol_store: InMemSignalProtocolStore,
) -> "SealedSenderDecryptionResult": ...

def sealed_sender_decrypt_to_usmc(
	ciphertext: bytes,
	protocol_store: InMemSignalProtocolStore,
) -> "UnidentifiedSenderMessageContent": ...

def sealed_sender_encrypt(
	destination: ProtocolAddress,
	sender_cert: "SenderCertificate",
	ptext: bytes,
	protocol_store: InMemSignalProtocolStore,
) -> bytes: ...

class SealedSenderDecryptionResult:
	def device_id(self) -> int: ...
	def message(self) -> bytes: ...
	def sender_e164(self) -> Optional[str]: ...
	def sender_uuid(self) -> Optional[str]: ...

class ServerCertificate:
	def __init__(self, key_id: int, key: PublicKey, trust_root: PrivateKey) -> None: ...

	@staticmethod
	def deserialize(data: bytes) -> "ServerCertificate": ...

	def validate(self, trust_root: PublicKey) -> bool: ...
	def key_id(self) -> int: ...
	def public_key(self) -> PublicKey: ...
	def certificate(self) -> bytes: ...
	def signature(self) -> bytes: ...
	def serialized(self) -> bytes: ...

class SenderCertificate:
	def __init__(
		self,
		sender_uuid: Optional[str],
		sender_e164: Optional[str],
		key: PublicKey,
		sender_device_id: int,
		expiration: int,
		signer: ServerCertificate,
		signer_key: PrivateKey,
	) -> None: ...

	@staticmethod
	def deserialize(data: bytes) -> "SenderCertificate": ...

	def validate(self, trust_root: PublicKey, validation_time: int) -> bool: ...
	def signer(self) -> ServerCertificate: ...
	def key(self) -> PublicKey: ...
	def sender_device_id(self) -> int: ...
	def sender_uuid(self) -> Optional[str]: ...
	def sender_e164(self) -> Optional[str]: ...
	def expiration(self) -> int: ...
	def certificate(self) -> bytes: ...
	def signature(self) -> bytes: ...
	def serialized(self) -> bytes: ...
	def preferred_address(self, store: InMemSignalProtocolStore) -> ProtocolAddress: ...

class UnidentifiedSenderMessage:
	def __init__(
		self,
		ephemeral_public: PublicKey,
		encrypted_static: bytes,
		encrypted_message: bytes,
	) -> None: ...

	@staticmethod
	def deserialize(data: bytes) -> "UnidentifiedSenderMessage": ...

	def version(self) -> int: ...
	def ephemeral_public(self) -> PublicKey: ...
	def encrypted_static(self) -> bytes: ...
	def encrypted_message(self) -> bytes: ...
	def serialized(self) -> bytes: ...

class UnidentifiedSenderMessageContent:
	def __init__(self, msg_type_value: int, sender: SenderCertificate, contents: bytes) -> None: ...

	@staticmethod
	def deserialize(data: bytes) -> "UnidentifiedSenderMessageContent": ...

	def msg_type(self) -> int: ...
	def sender(self) -> SenderCertificate: ...
	def contents(self) -> bytes: ...
	def serialized(self) -> bytes: ...
