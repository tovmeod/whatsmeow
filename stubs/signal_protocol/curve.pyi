from typing import Tuple

# Module-level functions
def generate_keypair() -> Tuple[bytes, bytes]: ...
def verify_signature(public_key: "PublicKey", message: bytes, signature: bytes) -> bool: ...

class KeyPair:
    def __init__(self, public_key: "PublicKey", private_key: "PrivateKey") -> None: ...

    @staticmethod
    def generate() -> "KeyPair": ...

    @staticmethod
    def from_public_and_private(public_key: bytes, private_key: bytes) -> "KeyPair": ...

    def public_key(self) -> "PublicKey": ...
    def private_key(self) -> "PrivateKey": ...
    def serialize(self) -> bytes: ...
    def calculate_signature(self, message: bytes) -> bytes: ...
    def calculate_agreement(self, their_key: "PublicKey") -> bytes: ...

class PublicKey:
    @staticmethod
    def deserialize(key: bytes) -> "PublicKey": ...

    def serialize(self) -> bytes: ...
    def verify_signature(self, message: bytes, signature: bytes) -> bool: ...

    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PrivateKey:
    @staticmethod
    def deserialize(key: bytes) -> "PrivateKey": ...

    def serialize(self) -> bytes: ...
    def calculate_signature(self, message: bytes) -> bytes: ...
    def calculate_agreement(self, their_key: "PublicKey") -> bytes: ...
    def public_key(self) -> "PublicKey": ...
