#Brokk project configuration
#Wed May 28 00:50:44 IDT 2025
buildDetailsJson={"buildFiles"\:["go.mod"],"dependencies"\:["github.com/google/uuid v1.6.0","github.com/gorilla/websocket v1.5.0","github.com/rs/zerolog v1.34.0","go.mau.fi/libsignal v0.2.0","go.mau.fi/util v0.8.7","golang.org/x/crypto v0.38.0","golang.org/x/net v0.40.0","google.golang.org/protobuf v1.36.6"],"buildLintCommand"\:"go vet ./...","testAllCommand"\:"go test ./...","instructions"\:"This is a Go library (module path\: go.mau.fi/whatsmeow).\\n\\nProject Setup\:\\n- Go version required\: 1.23.0 (toolchain go1.24.3 specified in go.mod).\\n- Ensure Go is installed and configured (GOPATH, GOROOT, GOBIN if customized).\\n\\nDependency Management\:\\n- Dependencies are managed using Go modules (go.mod and go.sum).\\n- To add a new dependency\: `go get <repository_url>`\\n- To tidy dependencies (prune unused and update go.sum)\: `go mod tidy`\\n\\nBuild Commands\:\\n- To check compilation of all packages in the module\: `go build ./...`\\n- To clean the build cache\: `go clean -cache`\\n\\nTesting\:\\n- To run all tests\: `go test ./...`\\n- To run specific tests in a package, e.g., TestMyFunction in the current directory\: `go test . -run ^TestMyFunction$`\\n- To run tests in a specific package\: `go test ./path/to/package`\\n\\nLinting and Formatting\:\\n- The project uses pre-commit hooks defined in `.pre-commit-config.yaml` for linting and formatting.\\n- It's recommended to install pre-commit (`pip install pre-commit`) and set up the hooks (`pre-commit install`).\\n- To run all pre-commit checks manually\: `pre-commit run --all-files`.\\n- Key tools invoked by pre-commit include\:\\n    - `goimports`\: Formats Go import statements. Configured with `-local go.mau.fi/whatsmeow -w`.\\n    - `go vet`\: Analyzes Go source code for suspicious constructs. Run as `go vet ./...`.\\n    - `go mod tidy`\: Ensures `go.mod` and `go.sum` are up-to-date.\\n    - `zerolog-use-stringer`\: A linter for zerolog usage.\\n- Individual linters/formatters can also be run manually\:\\n    - `go vet ./...`\\n    - `goimports -local go.mau.fi/whatsmeow -w <file_or_directory>`\\n\\nMain Application Entry Point\:\\n- This is a library project, so it does not have a main application entry point in the traditional sense.\\n- The primary functionality is exposed as Go packages intended to be imported into other Go applications.\\n- The `client.go` file contains the main client implementation.\\n- Refer to the GoDoc and examples for usage\: `https\://pkg.go.dev/go.mau.fi/whatsmeow\#example-package`\\n\\nDevelopment Environment\:\\n- No specific development profiles (e.g., Maven profiles) are used. Standard Go development practices apply.\\n- The `.editorconfig` file provides basic editor settings for consistent coding style.\\n- The `.gitignore` file lists standard Go and Python (for utility scripts) exclusions, as well as IDE-specific files.","excludedDirectories"\:["*.egg-info","build",".pytest_cache",".brokk","__pycache__",".tox","dist",".venv",".idea",".mypy_cache"]}
code_intelligence_refresh=MANUAL
dataRetentionPolicy=IMPROVE_BROKK
