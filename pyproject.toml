[tool.hatch.build.targets.wheel]
packages = ["mazahav"]

[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[project]
name = "pymeow"
version = "0.1.0"
description = "A Python implementation of the WhatsApp Web multidevice API"
readme = "README.md"
requires-python = "==3.13.*"
authors = [
    {name = "Pymeow Contributors", email = "tovmeod+pymeow@gmail.com"},
]
license = {text = "GPL-3.0-or-later"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Communications :: Chat",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "aerich==0.9.0",
    "aiohttp==3.12.2",
    "cryptography==45.0.3",
    "pillow==11.2.1",
    "protobuf>=4.21.0,<5.0.0",
    "pycryptodome==3.23.0",
    "python-dotenv==1.1.0",
    "qrcode==8.2",
    "signal-protocol==0.2.2",
    "tortoise-orm[asyncpg]==0.25.0",
]

[project.urls]
Homepage = "https://github.com/tulir/whatsmeow/tree/main/pymeow"
Bug_Tracker = "https://github.com/tulir/whatsmeow/issues"

[tool.setuptools]
packages = ["pymeow"]

[tool.setuptools.package-data]
pymeow = ["py.typed"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = "test_*.py"
addopts = "-v --cov=pymeow --cov-report=term-missing"

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'

[dependency-groups]
dev = [
    "mypy-protobuf==3.6.0",
    "pytest==8.3.5",
    "pytest-asyncio==1.0.0",
    "pytest-cov==6.1.1",
    "ruff==0.11.13",
    "types-protobuf>=4.24.0,<5.0.0",
]

[tool.ruff]
target-version = "py313"
# Show fixes in output
show-fixes = true
line-length = 120
extend-exclude = [
    "__pycache__",
    "*.egg-info",
    ".venv",
    "venv",
    "build",
    "dist",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "migrations",  # Django migrations
    "node_modules",
    "generated",
]
[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
#    "I",    # isort
#    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
#    "UP",   # pyupgrade
#    "ARG",  # flake8-unused-arguments
#    "SIM",  # flake8-simplify
#    "PL",   # Pylint
#    "RUF",  # Ruff-specific rules
]

# Rules to ignore
ignore = [
    "E501",   # Line too long (handled by formatter)
    "B008",   # Do not perform function calls in argument defaults
    "W191",   # Indentation contains tabs (handled by formatter)
    "B904",   # Use `raise ... from err`
    "B028",   # No explicit `stacklevel` argument found
    "PLC1901", # `{}` can be simplified to `{}`
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
	"SIM108",  # Use ternary operator
]

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Allow autofix for all enabled rules (when `--fix`) is provided
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
indent-style = "space"
# Respect magic trailing commas
skip-magic-trailing-comma = false
# Automatically detect the appropriate line ending
line-ending = "auto"
[tool.ruff.lint.isort]
# Group imports
known-first-party = ["pymeow"]  # Replace with your package name
split-on-trailing-comma = true
combine-as-imports = true

[tool.ruff.lint.pylint]
# Maximum number of arguments for function / method
max-args = 5

# Maximum number of local variables for function / method body
max-locals = 15

# Maximum number of branches for function / method body
max-branches = 12

[tool.ruff.lint.per-file-ignores]
# Tests can use assert statements and relative imports
"tests/**/*.py" = [
    "S101",   # Use of assert detected
    "ARG",    # Unused function args -> fixtures nevertheless are functionally relevant
    "FBT",    # Don't care about booleans as positional arguments in tests
    "PLR2004", # Magic value used in comparison
    "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes
]

# Scripts and examples can be more lenient
"scripts/**/*.py" = ["T201", "T203"]  # Allow print statements
"examples/**/*.py" = ["T201", "T203"]

# __init__.py files can have unused imports (re-exports)
"__init__.py" = ["F401"]

# Settings files can have many assignment statements
"**/settings/*.py" = ["RUF012"]
"**/config.py" = ["RUF012"]

[tool.ruff.lint.mccabe]
# Maximum cyclomatic complexity
max-complexity = 10
